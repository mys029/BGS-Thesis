---
title: "Thesis"
author: "Dylan Li"
format: 
  html:
    theme: 
      light: flatly
    page-layout: article
    code-fold: true
    self-contained: true
    code-tools: true
    toc: true
execute:
  echo: true
  error: true
  message: false
  warning: false
embed-resources: true
editor: visual
---

## Libraries

```{r}
#| label: libraries

library(tidyverse)
library(tidymodels)
library(glmnet)
library(discrim)
library(rpart)
library(rpart.plot)
library(baguette)
library(tidyclust)
library(caret)
library(RColorBrewer)
library(Polychrome)
library(forcats)
```

## Grid Setup

```{r}
#| label: grids

sample_grid <- matrix(c("Bear", "Bee", "Meadow", "Bear", "Meadow", "Meadow", "Bee", "Meadow", "Bee"),3,3,byrow=TRUE)
sample_grid

sample_grid2 <- matrix(c("Meadow", "Meadow", "Bee", "Meadow", "Bee", "Meadow", "Bee", "Meadow", "Meadow"),3,3,byrow=TRUE)
sample_grid2

big_grid1 <- matrix(c("Deer", "Meadow", "Bee", "Bear", "Fox", "Wolf", "Meadow", "Meadow", "Trout", "Stream",
                      "Deer", "Eagle", "Meadow", "Trout", "Stream", "Fox", "Rabbit", "Stream", "Dragonfly",
                      "Stream"),4,5,byrow=TRUE)
big_grid1

twenty_seven_x <- rep("x", 27)

super_vec <- append(twenty_seven_x, 
                      c("x", "x", 
                        "Deer", "Meadow", "Bee", "Bear", "Fox", 
                        "x", "x", 
                        "x", "x", 
                        "Wolf", "Meadow", "Meadow", "Trout", "Stream",
                        "x", "x", 
                        "x", "x", 
                        "Deer", "Eagle", "Meadow", "Trout", "Stream", 
                        "x", "x", 
                        "x", "x", 
                        "Fox", "Rabbit", "Stream", "Dragonfly","Stream",
                        "x", "x"))

super_grid1 <- matrix(super_vec,7,9,byrow=TRUE)
super_grid1
```

## Board Generation

```{r}
cards <- c(rep("Bear", 12), 
           rep("Bee", 8), 
           rep("Meadow", 20),
           rep("Trout", 10),
           rep("Eagle", 8),
           rep("Rabbit", 8),
           rep("Dragonfly", 8),
           rep("Fox", 12),
           rep("Deer", 12),
           rep("Stream", 20),
           rep("Wolf", 12)
           )

generate_grid <- function(pool, partial_grid = NULL){
  if(is.null(partial_grid) == FALSE){
    blanks <- which(partial_grid == "x", TRUE)
    n = 20 - nrow(blanks)
    
  }else{
    n = 20
  }
  
  sample <- sample(pool, n)
  
  if(is.null(partial_grid) == FALSE){
    
    board <- partial_grid
    
    for (i in 1:nrow(blanks)){
      loc <- c(blanks[[i, 1]], blanks[[i, 2]])
      board[blanks[[i, 1]], blanks[[i, 2]]] = sample[i]
    }
    
  }else{
    board <- matrix(sample, nrow=4, ncol=5, byrow=TRUE)
  }
  
  return(board)
}

generate_grid(cards)
```

## Helper functions

```{r}
find_cardinals <- function(i, j, grid){
  cardinals <- list()
  maxrow = nrow(grid)
  maxcol = ncol(grid)
      
  if(i+1 <= maxrow){
    cardinals[[length(cardinals)+1]] <- c(i+1,j)
  }
  
  if(i-1 > 0){
    cardinals[[length(cardinals)+1]] <- c(i-1,j)
  }
  
  if(j+1 <= maxcol){
    cardinals[[length(cardinals)+1]] <- c(i,j+1)
  }
  
  if(j-1 > 0){
    cardinals[[length(cardinals)+1]] <- c(i,j-1)
  }
  
  return(cardinals)
}
```

```{r}
find_two_spaces <- function(i, j, grid){
  two_space <- list()
  maxrow = nrow(grid)
  maxcol = ncol(grid)
      
  if(i+1 <= maxrow){
    two_space[[length(two_space)+1]] <- c(i+1,j)
  }
  
  if(i+2 <= maxrow){
    two_space[[length(two_space)+1]] <- c(i+2,j)
  }
  
  if(i-1 > 0){
    two_space[[length(two_space)+1]] <- c(i-1,j)
  }
  
  if(i-2 > 0){
    two_space[[length(two_space)+1]] <- c(i-2,j)
  }
  
  if(j+1 <= maxcol){
    two_space[[length(two_space)+1]] <- c(i,j+1)
  }
  
  if(j+2 <= maxcol){
    two_space[[length(two_space)+1]] <- c(i,j+2)
  }
  
  if(j-1 > 0){
    two_space[[length(two_space)+1]] <- c(i,j-1)
  }
  
  if(j-2 > 0){
    two_space[[length(two_space)+1]] <- c(i,j-2)
  }
  
  if(i+1 <= maxrow && j+1 <= maxcol){
    two_space[[length(two_space)+1]] <- c(i+1,j+1)
  }
  
  if(i+1 <= maxrow && j-1 > 0){
    two_space[[length(two_space)+1]] <- c(i+1,j-1)
  }
  
  if(i-1 > 0 && j+1 <= maxcol){
    two_space[[length(two_space)+1]] <- c(i-1,j+1)
  }
  
  if(i-1 > 0 && j-1 > 0){
    two_space[[length(two_space)+1]] <- c(i-1,j-1)
  }
  
  return(two_space)
}
```

```{r}
find_more_meadows <- function(i, j, grid, meadow_list){
  meadow_list[[length(meadow_list)+1]] = as.double(c(i,j))
  current_caridnals <- find_cardinals(i, j, grid)
  for (k in current_caridnals){
    if (grid[k[1],k[2]] == "Meadow"){
      if ((list(k) %in% meadow_list) == FALSE){
        meadow_list = find_more_meadows(as.double(k[1]),as.double(k[2]), grid, meadow_list)
      }
    }
  }
  return(meadow_list)
  
}
```

```{r}
find_more_streams <- function(i, j, grid, stream_list){
  stream_list[[length(stream_list)+1]] = as.double(c(i,j))
  current_caridnals <- find_cardinals(i, j, grid)
  for (k in current_caridnals){
    if (grid[k[1],k[2]] == "Stream"){
      if ((list(k) %in% stream_list) == FALSE){
        stream_list = find_more_streams(as.double(k[1]),as.double(k[2]), grid, stream_list)
      }
    }
  }
  return(stream_list)
  
}
```

## Scoring function

```{r}
#| label: grid-scoring-function

score_grid <- function(grid, individual=FALSE){
  
  score = 0
  
  meadow_patch = list()
  first_meadow = TRUE
  stream_patch = list()
  first_stream = TRUE
  dragonfly_list = list()
  deer_row <- c()
  deer_col <- c()
  # first_wolf = TRUE
  num_wolves = 0
  
  
  bear_score = 0
  bee_score = 0
  meadow_score = 0
  trout_score = 0
  eagle_score = 0
  rabbit_score = 0
  dragonfly_score = 0
  fox_score = 0
  deer_score = 0
  stream_score = 0
  wolf_score = 0
  diversity_score = 0
  
  for (i in 1:nrow(grid)) {
    for (j in 1:ncol(grid)) {
      
      current_caridnals <- find_cardinals(i, j, grid)
      
      
      if(grid[i,j] == "Bear"){
        for (k in current_caridnals){
          if (grid[k[1],k[2]] == "Bee" || grid[k[1],k[2]] == "Trout"){
            score = score + 2
            bear_score = bear_score + 2
          }
        }
      }
      
      if(grid[i,j] == "Bee"){
        for (k in current_caridnals){
          if (grid[k[1],k[2]] == "Meadow"){
            score = score + 3
            bee_score = bee_score + 3
          }
        }
      }
      
      if(grid[i,j] == "Meadow"){
        if (first_meadow == TRUE){
          
          first_meadow = FALSE
          first_patch = list()
          completed_patch = find_more_meadows(as.double(i), as.double(j), grid, first_patch)
          meadow_patch[[length(meadow_patch)+1]] = completed_patch
          
        }else{
          
          exist = FALSE
          
          for (x in 1:length(meadow_patch)){
            if (list(as.double(c(i,j))) %in% meadow_patch[[x]]){
              exist = TRUE
            }
          }
          
          if (exist == FALSE){
            new_patch = list()
            completed_patch = find_more_meadows(as.double(i), as.double(j), grid, new_patch)
            meadow_patch[[length(meadow_patch)+1]] = completed_patch
          }
          
        }
      }
      
      if(grid[i,j] == "Trout"){
        for (k in current_caridnals){
          if (grid[k[1],k[2]] == "Dragonfly" || grid[k[1],k[2]] == "Stream"){
            score = score + 2
            trout_score = trout_score + 2
          }
        }
      }
      
      if(grid[i,j] == "Eagle"){
        
        two_space <- find_two_spaces(i, j, grid)
        
        for (k in two_space){
          if (grid[k[1],k[2]] == "Trout" || grid[k[1],k[2]] == "Rabbit"){
            score = score + 2
            eagle_score = eagle_score + 2
          }
        }
      }
      
      if(grid[i,j] == "Rabbit"){
        score = score + 1
        rabbit_score = rabbit_score + 1
      }
      
      if(grid[i,j] == "Dragonfly"){
        dragonfly_list[[length(dragonfly_list)+1]] = as.double(c(i,j))
      }
      
      if(grid[i,j] == "Fox"){
        score_it = TRUE
        
        for (k in current_caridnals){
          if (grid[k[1],k[2]] == "Bear" || grid[k[1],k[2]] == "Wolf"){
            score_it = FALSE
          }
        }
        
        if (score_it){
          score = score + 3
          fox_score = fox_score + 3
        }
      }
      
      if(grid[i,j] == "Deer"){
        deer_row <- append(deer_row, i)
        deer_col <- append(deer_col, j)
      }
      
      if(grid[i,j] == "Stream"){
        if (first_stream == TRUE){
          
          first_stream = FALSE
          first_patch = list()
          completed_patch = find_more_streams(as.double(i), as.double(j), grid, first_patch)
          stream_patch[[length(stream_patch)+1]] = completed_patch
          
        }else{
          
          exist = FALSE
          
          for (x in 1:length(stream_patch)){
            if (list(as.double(c(i,j))) %in% stream_patch[[x]]){
              exist = TRUE
            }
          }
          
          if (exist == FALSE){
            new_patch = list()
            completed_patch = find_more_streams(as.double(i), as.double(j), grid, new_patch)
            stream_patch[[length(stream_patch)+1]] = completed_patch
          }
          
        }
      }
      
      if(grid[i,j] == "Wolf"){
        # temporary stand in, can only be scored properly with more than 1 player
        # if (first_wolf == TRUE){
        #   score = score + 8
        #   wolf_score = wolf_score + 8
        #   first_wolf == FALSE
        # }
        
        num_wolves = num_wolves + 1
      }
      
    }
  }
  
  for (i in meadow_patch){
    if (length(i) == 2){
      score = score + 3
      meadow_score = meadow_score + 3
    }else if (length(i) == 3){
      score = score + 6
      meadow_score = meadow_score + 6
    }else if (length(i) == 4){
      score = score + 10
      meadow_score = meadow_score + 10
    }else if (length(i) >= 5){
      score = score + 15
      meadow_score = meadow_score + 15
    }
  }
  
  largest_stream = 0
  
  for (i in stream_patch){
    if (length(i) > largest_stream){
      largest_stream = length(i)
    }
  }
  
  # temporary scoring for largest stream, can only be scored properly with more than 1 player
  # if (largest_stream > 0){
  #   score = score + 5
  #   stream_score = stream_score + 5
  # }
  
  for (d in dragonfly_list){
    current_caridnals <- find_cardinals(d[1], d[2], grid)
    
    largest_score = 0
    
    for (k in current_caridnals){
      if (grid[k[1],k[2]] == "Stream"){
        for (s in stream_patch){
          if((list(k) %in% s) == TRUE){
            # OLD scoring below, incorrect
            # current_score = 2 * length(s)
            current_score = length(s) # NEW scoring, corrected
            if (current_score > largest_score){
              largest_score = current_score
            }
          }
        }
      }
    }
    
    score = score + largest_score
    dragonfly_score = dragonfly_score + largest_score
  }
  
  score = score + 2*length(unique(deer_row))
  score = score + 2*length(unique(deer_col))
  
  deer_score = deer_score + 2*length(unique(deer_row))
  deer_score = deer_score + 2*length(unique(deer_col))
  
  diversity_matrix <- matrix(c(bear_score, bee_score, meadow_score, trout_score, eagle_score, rabbit_score,
           dragonfly_score, fox_score, deer_score))
  
  diversity_vector <- c(bear_score, bee_score, meadow_score, trout_score, eagle_score, rabbit_score,
           dragonfly_score, fox_score, deer_score)

  gaps = colSums(diversity_matrix == 0)[1]
   
  # if(gaps >= 6){
  #   score = score - 5
  #   diversity_score = -5
  # }else if (gaps == 4){
  #   score = score + 3
  #   diversity_score = 3
  # }else if (gaps == 3){
  #   score = score + 7
  #   diversity_score = 7
  # }else if (gaps <= 2){
  #   score = score + 12
  #   diversity_score = 12
  # }
  if(individual==TRUE){
    if(largest_stream == 0){
      gaps = gaps + 1
    }
    if(num_wolves == 0){
      gaps = gaps + 1
    }
  
    if(gaps >= 6){
        dv_score = -5
      }else if (gaps == 4){
        dv_score = 3
      }else if (gaps == 3){
        dv_score = 7
      }else if (gaps <= 2){
        dv_score = 12
      }else{
        dv_score = 0
      }
    
    return(c(diversity_vector,largest_stream, num_wolves, dv_score))
  }else{
    return(c(score, largest_stream, num_wolves, gaps))
  }
  
}
```

## Solo play scoring

```{r}
solo_score <- function(score_vector){
  score = score_vector[1]
  stream_size = score_vector[2]
  num_wolves = score_vector[3]
  num_gaps = score_vector[4]
  
  score = score + stream_size + num_wolves
  
  if(stream_size == 0){
    num_gaps = num_gaps + 1
  }
  if(num_wolves == 0){
    num_gaps = num_gaps + 1
  }
  
  if(num_gaps >= 6){
      score = score - 5
    }else if (num_gaps == 4){
      score = score + 3
    }else if (num_gaps == 3){
      score = score + 7
    }else if (num_gaps <= 2){
      score = score + 12
    }
  
  return(score)
}
```

## Multiplayer Scoring

```{r}
mp_score <- function(score_list){
  
  # each entry in score_list follows the format: c(score, size_of_largest_stream, num_wolves, diversity_gaps)
  
  if(length(score_list) > 2){
    more_than_2 = TRUE
  }else{
    more_than_2 = FALSE
  }
  
  score <- rep(0, length(score_list))
  stream_size <- rep(0, length(score_list))
  num_wolves <- rep(0, length(score_list))
  num_gaps <- rep(0, length(score_list))
  
  for (i in 1:length(score_list)){
    
    score[i] = score_list[[i]][1]
    
    stream_size[i] = score_list[[i]][2]
    
    num_wolves[i] = score_list[[i]][3]
    
    num_gaps[i] = score_list[[i]][4] + 2
    
  }
  
  print(score)
  
  stream_size = sort(stream_size, decreasing = TRUE)
  num_wolves = sort(num_wolves, decreasing = TRUE)
  
  stream_matrix = matrix(stream_size)
  wolf_matrix = matrix(num_wolves)
  
  largest_stream = stream_size[1]
  second_stream = stream_size[2]
  
  score_largest_s = TRUE
  score_second_s = TRUE
  
  if(colSums(stream_matrix == largest_stream)[1] > 1){
    score_second_s = FALSE
  }
  
  for (i in 1:length(score_list)){
      if (score_list[[i]][2] == largest_stream && largest_stream != 0){
        score[i] = score[i] + 8
        num_gaps[i] = num_gaps[i] - 1
      }
  }
  
  if(score_second_s == TRUE){
    for (i in 1:length(score_list)){
      if (score_list[[i]][2] == second_stream && second_stream != 0){
        score[i] = score[i] + 5
        num_gaps[i] = num_gaps[i] - 1
      }
    }
  }
  
  print(score)
  
  most_wolves = num_wolves[1]
  second_wolves = num_wolves[2]
  if(more_than_2){
    third_wolves = num_wolves[3]
  }
  
  score_most_w = TRUE
  score_second_w = TRUE
  score_third_w = TRUE
  
  if(colSums(wolf_matrix == most_wolves)[1] > 1){
    score_second_w = FALSE
    if(colSums(wolf_matrix == most_wolves)[1] > 2){
      score_third_w = FALSE
    }
  }
  
  for (i in 1:length(score_list)){
      if (score_list[[i]][3] == most_wolves){
        score[i] = score[i] + 12
        num_gaps[i] = num_gaps[i] - 1
      }
  }
  
  if(colSums(wolf_matrix == second_wolves)[1] > 1){
    score_third_w = FALSE
  }
  
  if(score_second_w == TRUE){
    for (i in 1:length(score_list)){
      if (score_list[[i]][3] == second_wolves){
        score[i] = score[i] + 8
        num_gaps[i] = num_gaps[i] - 1
      }
    }
  }
  
  if(score_third_w == TRUE && more_than_2 == TRUE){
    for (i in 1:length(score_list)){
      if (score_list[[i]][3] == third_wolves){
        score[i] = score[i] + 4
        num_gaps[i] = num_gaps[i] - 1
      }
    }
  }
  
  print(score)
  
  for(i in 1:length(score_list)){
    if(num_gaps[i] >= 6){
      score[i] = score[i] - 5
    }else if (num_gaps[i] == 4){
      score[i] = score[i] + 3
    }else if (num_gaps[i] == 3){
      score[i] = score[i] + 7
    }else if (num_gaps[i] <= 2){
      score[i] = score[i] + 12
    }
  }
  
  
  
  return(score)
  
}
```

## Baseline function

```{r}
baseline_sim <- function(cards, n = 10000){
  all_scores <- c()
  for (i in 1:n){
    sim_grid <- generate_grid(cards)
    all_scores <- c(all_scores, solo_score(score_grid(sim_grid)))
  }
  return(all_scores)
}
```

## Random Walk MCMC

```{r}
rw_mcmc <- function(grid, iterations = 1000, acceptance_func = "simple", beta = 0, bp = 500, original = NULL, record_board = FALSE){
  start_score <- solo_score(score_grid(grid))
  start_grid <- grid
  current_grid <- grid
  continue <- TRUE
  rows <- rep(1:nrow(grid))
  cols <- rep(1:ncol(grid))
  iter = 0
  score_vector <- c()
  highest_score <- start_score
  highest_grid <- grid
  highest_iter <- 0
  
  while(continue){
    current_score <- solo_score(score_grid(current_grid))
    if(bp == 0){
    }else if(iter%%bp == 0){
      if(acceptance_func == "annealing dynamic" || 
         acceptance_func == "delayed"){
        current_grid = highest_grid
        current_score = highest_score
      }
    }
    score_vector = c(score_vector, current_score)
    if(current_score > highest_score){
      highest_score = current_score
      highest_grid = current_grid
      highest_iter = iter
    }
    
    # Choosing swap locations if grid is partially complete
    if(is.null(original) == FALSE){
      blanks <- which(original == "x", TRUE)
      possible <- list()
      
      for (i in 1:nrow(blanks)){
        loc <- c(blanks[[i, 1]], blanks[[i, 2]])
        possible[[length(possible)+1]] = loc
      }
      
      start_loc <- sample(possible, 1)
      start_loc <- start_loc[[1]]
      start_row <- start_loc[1]
      start_col <- start_loc[2]
      
      end_loc <- sample(possible, 1)
      end_loc <- end_loc[[1]]
      end_row <- end_loc[1]
      end_col <- end_loc[2]
      
      while(current_grid[start_row, start_col] == current_grid[end_row, end_col]){
        end_loc <- sample(possible, 1)
        end_loc <- end_loc[[1]]
        end_row <- end_loc[1]
        end_col <- end_loc[2]
      }
    
    # Choosing swap locations without partial grid  
    }else{
      
      start_row <- sample(rows, 1)
      start_col <- sample(cols, 1)
      
      # Random swap anywhere
      end_row <- sample(rows, 1)
      end_col <- sample(cols, 1)
  
      while(current_grid[start_row, start_col] == current_grid[end_row, end_col]){
        end_row <- sample(rows, 1)
        end_col <- sample(cols, 1)
      }
    }
    # Adjacent swap only
    # possible_end <- find_cardinals(start_row, start_col, grid)
    # end <- sample(possible_end, 1)
    # end_row <- end[[1]][1]
    # end_col <- end[[1]][2]
    
    proposed_grid <- current_grid
    
    # if(iter == 347 || iter == 668){
    #   print(proposed_grid)
    # }
    
    start <- current_grid[start_row, start_col]
    end <- current_grid[end_row, end_col]
    
    proposed_grid[start_row, start_col] = end
    proposed_grid[end_row, end_col] = start
    
    proposed_score <- solo_score(score_grid(proposed_grid))
    
    if(acceptance_func == "simple"){
      p = proposed_score
      c = current_score
      if(p <= 0){
        p = p + -1*p + 1
        c = c + -1*p + 1
      }
      if(c <= 0){
        c = c + -1*c + 1
        p = p + -1*c + 1
      }
      
      x <- runif(1,0,1)
      if(x < p/c){
        current_grid <- proposed_grid
      }
    }
    
    if(acceptance_func == "annealing"){
      p = proposed_score
      c = current_score
      
      x <- runif(1,0,1)
      if(x < exp(beta*p)/exp(beta*c)){
        current_grid <- proposed_grid
      }
    }
    
    if(acceptance_func == "annealing dynamic"){
      p = proposed_score
      c = current_score
      
      factor = floor(iter/bp) + 1
      b = beta*(factor)
      
      x <- runif(1,0,1)
      if(x < exp(b*p)/exp(b*c)){
        current_grid <- proposed_grid
      }
    }
    
    if(acceptance_func == "delayed"){
      p = proposed_score
      c = current_score
      if(p <= 0){
        p = p + -1*p + 1
        c = c + -1*p + 1
      }
      if(c <= 0){
        c = c + -1*c + 1
        p = p + -1*c + 1
      }
      
      x <- runif(1,0,1)
      if(x < p/c && p/c < 1){
        p2 = proposed_score
        c2 = current_score
        
        factor = floor(iter/500) + 1
        b = beta*(factor)
        
        x <- runif(1,0,1)
        if(x < (exp(b*p2)*c)/(exp(b*c2)*p)){
          current_grid <- proposed_grid
        }
      }else if(p/c >= 1){
        current_grid <- proposed_grid
      }
    }
    
    iter = iter + 1
      if(iter >= iterations){
        continue = FALSE
      }
  }
  
  final_score <- solo_score(score_grid(current_grid))
  if(final_score > highest_score){
      highest_score = final_score
      highest_grid = grid
    }
  
  if(record_board == TRUE){
    return(c(t(highest_grid), highest_score, t(start_grid), start_score))
  }else{
    return(c(highest_score, final_score, start_score, highest_iter, data.frame(score_vector)))
  }
}
```

```{r}
multi_mcmc <- function(iterations, n, acceptance_func = "simple", beta = 0, bp = 500, grid = NULL, boardlist = NULL, record_board = FALSE, cards = NULL, card_name = NULL){
  first = TRUE
  start_scores <- c()
  highest_scores <- c()
  highest_iter <- c()
  if(is.null(cards) == TRUE){
    cards <- c(rep("Bear", 12), 
           rep("Bee", 8), 
           rep("Meadow", 20),
           rep("Trout", 10),
           rep("Eagle", 8),
           rep("Rabbit", 8),
           rep("Dragonfly", 8),
           rep("Fox", 12),
           rep("Deer", 12),
           rep("Stream", 20),
           rep("Wolf", 12)
           )
    if(is.null(card_name) == TRUE){
      card_name = "default"
    }
  }
  
  
  # Creating proper pool of cards if grid is partially complete
  if(is.null(grid) == FALSE){
    df <- as.data.frame(table(grid))
    animals <- levels(df$grid)
    for(i in 1:nrow(grid)){
      animal <- animals[i]
      num = length(cards[cards == animal])
      cards = cards[!cards == animal]
      cards <- c(cards, rep(animal, num - df[i,2]))
    }
  }
  
  for(i in 1:n){
    
    if(is.null(grid) == FALSE){
      
      if(record_board == TRUE){
        sim_grid <- generate_grid(cards, grid)
        run <- rw_mcmc(sim_grid, iterations, acceptance_func, beta, bp, grid, record_board = TRUE)
      }else{
        sim_grid <- generate_grid(cards, grid)
        run <- rw_mcmc(sim_grid, iterations, acceptance_func, beta, bp, grid)
      }
      
    }else if(is.null(boardlist) == FALSE){
      
      if(record_board == TRUE){
        run <- rw_mcmc(boardlist[[i]], iterations, acceptance_func, beta, bp, record_board = TRUE)
      }else{
        run <- rw_mcmc(boardlist[[i]], iterations, acceptance_func, beta, bp)
      }
      
    }else{
      if(record_board == TRUE){
        sim_grid <- generate_grid(cards)
        run <- rw_mcmc(sim_grid, iterations, acceptance_func, beta, bp, record_board = TRUE)
      }else{
        sim_grid <- generate_grid(cards)
        run <- rw_mcmc(sim_grid, iterations, acceptance_func, beta, bp)
      }
    }
    
    if(record_board == TRUE){
      if(first == TRUE){
        first = FALSE
        
        df <- data.frame(
          row1col1 = run[[1]],
          row1col2 = run[[2]],
          row1col3 = run[[3]],
          row1col4 = run[[4]],
          row1col5 = run[[5]],
          row2col1 = run[[6]],
          row2col2 = run[[7]],
          row2col3 = run[[8]],
          row2col4 = run[[9]],
          row2col5 = run[[10]],
          row3col1 = run[[11]],
          row3col2 = run[[12]],
          row3col3 = run[[13]],
          row3col4 = run[[14]],
          row3col5 = run[[15]],
          row4col1 = run[[16]],
          row4col2 = run[[17]],
          row4col3 = run[[18]],
          row4col4 = run[[19]],
          row4col5 = run[[20]],
          score = run[[21]],
          pool = card_name,
          start_score = run[[42]],
          row1col1_s = run[[22]],
          row1col2_s = run[[23]],
          row1col3_s = run[[24]],
          row1col4_s = run[[25]],
          row1col5_s = run[[26]],
          row2col1_s = run[[27]],
          row2col2_s = run[[28]],
          row2col3_s = run[[29]],
          row2col4_s = run[[30]],
          row2col5_s = run[[31]],
          row3col1_s = run[[32]],
          row3col2_s = run[[33]],
          row3col3_s = run[[34]],
          row3col4_s = run[[35]],
          row3col5_s = run[[36]],
          row4col1_s = run[[37]],
          row4col2_s = run[[38]],
          row4col3_s = run[[39]],
          row4col4_s = run[[40]],
          row4col5_s = run[[41]]
        )
        
      }else{
        row <- data.frame(
          row1col1 = run[[1]],
          row1col2 = run[[2]],
          row1col3 = run[[3]],
          row1col4 = run[[4]],
          row1col5 = run[[5]],
          row2col1 = run[[6]],
          row2col2 = run[[7]],
          row2col3 = run[[8]],
          row2col4 = run[[9]],
          row2col5 = run[[10]],
          row3col1 = run[[11]],
          row3col2 = run[[12]],
          row3col3 = run[[13]],
          row3col4 = run[[14]],
          row3col5 = run[[15]],
          row4col1 = run[[16]],
          row4col2 = run[[17]],
          row4col3 = run[[18]],
          row4col4 = run[[19]],
          row4col5 = run[[20]],
          score = run[[21]],
          pool = card_name,
          start_score = run[[42]],
          row1col1_s = run[[22]],
          row1col2_s = run[[23]],
          row1col3_s = run[[24]],
          row1col4_s = run[[25]],
          row1col5_s = run[[26]],
          row2col1_s = run[[27]],
          row2col2_s = run[[28]],
          row2col3_s = run[[29]],
          row2col4_s = run[[30]],
          row2col5_s = run[[31]],
          row3col1_s = run[[32]],
          row3col2_s = run[[33]],
          row3col3_s = run[[34]],
          row3col4_s = run[[35]],
          row3col5_s = run[[36]],
          row4col1_s = run[[37]],
          row4col2_s = run[[38]],
          row4col3_s = run[[39]],
          row4col4_s = run[[40]],
          row4col5_s = run[[41]]
        )
        df <- rbind(df, row) 
      }
    }else{
      start_scores <- c(start_scores, run[[3]])
      highest_scores <- c(highest_scores, run[[1]])
      highest_iter <- c(highest_iter, run[[4]])
    }
    
  }
  
  if(record_board == TRUE){
    return(df)
  }else{
    return(list(start_scores, highest_scores, highest_iter))
  }
  
}
```

## Data Generation

```{r, eval=FALSE}
set.seed(4)
x1 <- multi_mcmc(2000, 100, "simple")
```

```{r, eval=FALSE}
mean(x1[[1]])
sd(x1[[1]])
var(x1[[1]])
max(x1[[1]])
min(x1[[1]])
summary(x1[[1]])
```

```{r, eval=FALSE}
mean(x1[[2]])
sd(x1[[2]])
var(x1[[2]])
max(x1[[2]])
min(x1[[2]])
summary(x1[[2]])
summary(x1[[3]])
```

```{r, eval=FALSE}
set.seed(4)
x2 <- multi_mcmc(2000, 100, "annealing", 0.8, 250)
```

```{r, eval=FALSE}
mean(x2[[1]])
sd(x2[[1]])
var(x2[[1]])
max(x2[[1]])
min(x2[[1]])
summary(x2[[1]])
```

```{r, eval=FALSE}
mean(x2[[2]])
sd(x2[[2]])
var(x2[[2]])
max(x2[[2]])
min(x2[[2]])
summary(x2[[2]])
summary(x2[[3]])
```

```{r, eval=FALSE}
set.seed(4)
x3 <- multi_mcmc(2000, 100, "annealing dynamic", 0.08, 250)
```

```{r, eval=FALSE}
mean(x3[[1]])
sd(x3[[1]])
var(x3[[1]])
max(x3[[1]])
min(x3[[1]])
summary(x3[[1]])
```

```{r, eval=FALSE}
mean(x3[[2]])
sd(x3[[2]])
var(x3[[2]])
max(x3[[2]])
min(x3[[2]])
summary(x3[[2]])
summary(x3[[3]])
```

```{r, eval=FALSE}
set.seed(4)
x4 <- multi_mcmc(2000, 100, "annealing dynamic", 0.2, 250)
```

```{r, eval=FALSE}
mean(x4[[1]])
sd(x4[[1]])
var(x4[[1]])
max(x4[[1]])
min(x4[[1]])
summary(x4[[1]])
```

```{r, eval=FALSE}
mean(x4[[2]])
sd(x4[[2]])
var(x4[[2]])
max(x4[[2]])
min(x4[[2]])
summary(x4[[2]])
```

```{r, eval=FALSE}
set.seed(49)
x5 <- multi_mcmc(2000, 100, "annealing", 0.8, 250)
```

```{r, eval=FALSE}
mean(x5[[1]])
sd(x5[[1]])
var(x5[[1]])
max(x5[[1]])
min(x5[[1]])
summary(x5[[1]])
```

```{r, eval=FALSE}
mean(x5[[2]])
sd(x5[[2]])
var(x5[[2]])
max(x5[[2]])
min(x5[[2]])
summary(x5[[2]])
summary(x5[[3]])
```

```{r, eval=FALSE}
set.seed(49)
x6 <- multi_mcmc(2000, 100, "delayed", 0.2, 250)
```

```{r, eval=FALSE}
mean(x6[[1]])
sd(x6[[1]])
var(x6[[1]])
max(x6[[1]])
min(x6[[1]])
summary(x6[[1]])
```

```{r, eval=FALSE}
mean(x6[[2]])
sd(x6[[2]])
var(x6[[2]])
max(x6[[2]])
min(x6[[2]])
summary(x6[[2]])
summary(x6[[3]])
```

```{r, eval=FALSE}
set.seed(49)
x7 <- multi_mcmc(1000, 1000, "annealing", 0.8, 250)
```

```{r, eval=FALSE}
mean(x7[[1]])
sd(x7[[1]])
var(x7[[1]])
max(x7[[1]])
min(x7[[1]])
summary(x7[[1]])
```

```{r, eval=FALSE}
mean(x7[[2]])
sd(x7[[2]])
var(x7[[2]])
max(x7[[2]])
min(x7[[2]])
summary(x7[[2]])
summary(x7[[3]])
```

```{r}
test_grid1 <- matrix(c("x", "Bee", "Meadow", "x", "x", "x", "Meadow", "Meadow", "x", "x",
                      "Deer", "Bee", "Meadow", "x", "x", "x", "Bear", "Bee", "Deer",
                      "x"),4,5,byrow=TRUE)
test_grid1
```

```{r, eval=FALSE}
set.seed(4)
partial1 <- multi_mcmc(1000, 100, "annealing", 0.8, 200, test_grid1)
```

```{r, eval=FALSE}
mean(partial1[[1]])
sd(partial1[[1]])
var(partial1[[1]])
max(partial1[[1]])
min(partial1[[1]])
summary(partial1[[1]])
```

```{r, eval=FALSE}
mean(partial1[[2]])
sd(partial1[[2]])
var(partial1[[2]])
max(partial1[[2]])
min(partial1[[2]])
summary(partial1[[2]])
summary(partial1[[3]])
```

## Tuning

```{r}
tune <- function(iter, beta, bp, type, boardlist = NULL){
  beta_df <- c()
  bp_df <- c()
  iter_df <- c()
  start_score <- c()
  highest_score <- c()
  iter_at_highest <- c()
  highest_score_sd <- c()
  highest_iter_sd <- c()
  max_highest <- c()
  percentile_90 <- c()
  score_65_plus <- c()
  for(i in beta){
    for (j in bp){
      for(k in iter){
        if(is.null(boardlist) == FALSE){
          sim <- multi_mcmc(k, 100, type, i, j, boardlist = boardlist)
        }else{
          sim <- multi_mcmc(k, 100, type, i, j)
        }
        beta_df <- c(beta_df, i)
        bp_df <- c(bp_df, j)
        iter_df <- c(iter_df, k)
        start_score <- c(start_score, mean(sim[[1]]))
        highest_score <- c(highest_score, mean(sim[[2]]))
        iter_at_highest <- c(iter_at_highest, mean(sim[[3]]))
        highest_iter_sd <- c(highest_iter_sd, sd(sim[[3]]))
        highest_score_sd <- c(highest_score_sd, sd(sim[[2]]))
        max_highest <- c(max_highest, max(sim[[2]]))
        percentile_90 <- c(percentile_90, quantile(sim[[2]],probs=0.9))
        s <- sim[[2]]
        score_65_plus <- c(score_65_plus, length(s[s>=65]))
      }
      
    }
  }
  
  df <- data.frame(
    iterations = iter_df,
    beta = beta_df,
    break_point = bp_df,
    mean_start_score = start_score,
    mean_highest_score = highest_score,
    sd_highest_score = highest_score_sd,
    max_score = max_highest,
    score_90th_percent = percentile_90,
    score_65_plus = score_65_plus,
    average_iterations = iter_at_highest,
    sd_iterations = highest_iter_sd,
    type = type
  )
  
  return(df)
}
```

```{r, eval=FALSE}
beta <- c(0.3,0.8,0.9)
bp <- c(125, 250)
iter <- c(500, 750)

set.seed(4)
tune1 <- tune(iter, beta, bp, "delayed")
```

```{r, eval=FALSE}
tune1
```

```{r}
generate_100 <- function(pool){
  board_list <- list()
  for(i in 1:100){
    board <- generate_grid(pool)
    board_list[[length(board_list)+1]] = board
  }
  return(board_list)
}
```

```{r, eval=FALSE}
# set.seed(88)
set.seed(89)
board100 <- generate_100(cards)
```

### OLD scoring function

```{r}
OLD <- multi_mcmc(1000, 100, "annealing dynamic", 0.9, 200, record_board = TRUE, boardlist = board100)
```

### NEW scoring function

```{r}
NEW <- multi_mcmc(1000, 100, "annealing dynamic", 0.9, 200, record_board = TRUE, boardlist = board100)
```

```{r, eval=FALSE}
tune_exact1 <- tune(1000, 0.99, 250, "annealing dynamic", boardlist = board100)
tune_exact2 <- tune(1000, 0.9, 200, "annealing dynamic", boardlist = board100)
tune_exact3 <- tune(2000, 0.7, 500, "delayed", boardlist = board100)
tune_exact4 <- tune(2000, 0.8, 500, "annealing dynamic", boardlist = board100)
tune_exact5 <- tune(1500, 0.9, 500, "annealing dynamic", boardlist = board100)
tune_exact6 <- tune(750, 0.99, 250, "annealing dynamic", boardlist = board100)
tune_exact7 <- tune(750, 0.3, 250, "delayed", boardlist = board100)
tune_exact8 <- tune(500, 0.99, 250, "annealing dynamic", boardlist = board100)
tune_exact9 <- tune(2000, 0.9, 250, "annealing dynamic", boardlist = board100)
tune_exact10 <- tune(750, 0.9, 125, "annealing dynamic", boardlist = board100)
tune_exact11 <- tune(1500, 0.9, 250, "annealing dynamic", boardlist = board100)
```

```{r}
final_params <- rbind(tune_exact1,
                      tune_exact2,
                      tune_exact3,
                      tune_exact4,
                      tune_exact5,
                      tune_exact6,
                      tune_exact7,
                      tune_exact8,
                      tune_exact9,
                      tune_exact10,
                      tune_exact11)

write.csv(final_params,here::here("final-parameters-CORRECTED-seed2.csv"), row.names = FALSE)
```

```{r, eval=FALSE}
# write.csv(tune1,here::here("new-parameters.csv"),row.names = FALSE)
```

```{r, eval=FALSE}
tuned_params1 <- read.csv(here::here("final-parameters-CORRECTED.csv"))
```

```{r}
tuned_params2 <- read.csv(here::here("final-parameters-CORRECTED-seed2.csv"))
```

```{r, eval=FALSE}
new_params <- rbind(tuned_params1, tune1)
write.csv(new_params,here::here("new-parameters.csv"), row.names = FALSE)
```

```{r}
set.seed(45)
sim_grid1 <- generate_grid(cards)
x <- rw_mcmc(sim_grid1, 2000, "annealing dynamic", beta = 0.8, 250)
```

```{r}
xz <- data.frame(iter = rep(1:length(x[[4]])), scores = x[[4]])
ggplot(aes(x = iter, y = scores), data = xz) +
  geom_line()
```

## Database

```{r}
cards <- c(rep("Bear", 12), 
           rep("Bee", 8), 
           rep("Meadow", 20),
           rep("Trout", 10),
           rep("Eagle", 8),
           rep("Rabbit", 8),
           rep("Dragonfly", 8),
           rep("Fox", 12),
           rep("Deer", 12),
           rep("Stream", 20),
           rep("Wolf", 12)
           )

dfly_stream <- c(rep("Bear", 6), 
           rep("Bee", 4), 
           rep("Meadow", 10),
           rep("Trout", 5),
           rep("Eagle", 4),
           rep("Rabbit", 4),
           rep("Dragonfly", 8),
           rep("Fox", 6),
           rep("Deer", 6),
           rep("Stream", 20),
           rep("Wolf", 6)
           )

bee_meadow <- c(rep("Bear", 6), 
           rep("Bee", 8), 
           rep("Meadow", 20),
           rep("Trout", 5),
           rep("Eagle", 4),
           rep("Rabbit", 4),
           rep("Dragonfly", 4),
           rep("Fox", 6),
           rep("Deer", 6),
           rep("Stream", 10),
           rep("Wolf", 6)
           )

low_eag_rab <- c(rep("Bear", 12), 
           rep("Bee", 8), 
           rep("Meadow", 20),
           rep("Trout", 10),
           rep("Eagle", 2),
           rep("Rabbit", 2),
           rep("Dragonfly", 8),
           rep("Fox", 12),
           rep("Deer", 12),
           rep("Stream", 20),
           rep("Wolf", 12)
           )
```

### Shuffle old database

```{r}
database_INCORRECT <- read.csv(here::here("database.csv"))
database_INCORRECT <- database_INCORRECT %>%
  arrange(pool)
```

```{r}
dist <- database_INCORRECT %>% 
  group_by(pool) %>%
  summarize(count = n())
dist
```

```{r}
ID_NEW <- database_INCORRECT %>% 
  select(ID)

database_INCORRECT <- database_INCORRECT %>% 
  select(2:21)
```

```{r}
shuffle <- function(df) {

  shuffled_df <- as.data.frame(t(apply(df, 1, sample)))
  
  colnames(shuffled_df) <- colnames(df)
  
  if (!is.null(rownames(df))) {
    rownames(shuffled_df) <- rownames(df)
  }
  
  return(shuffled_df)
}
```

```{r}
set.seed(88)
shuffled_incorrect <- shuffle(database_INCORRECT)
```

```{r}
# write.csv(shuffled_incorrect, here::here("shuffled_database.csv"), row.names = FALSE)
```

```{r}
shuffled_incorrect <- read.csv(here::here("shuffled_database.csv"))
```

### Convert to function ready

```{r}
df_to_matrix_list <- function(df) {
  if (ncol(df) != 20) {
    stop("Dataframe must have exactly 20 columns")
  }
  
  matrix_list <- lapply(1:nrow(df), function(i) {
    matrix(as.character(df[i, ]),  # Keep as character
           nrow = 4, 
           ncol = 5, 
           byrow = TRUE,
           dimnames = list(NULL, paste0("col", 1:5)))  # Optional column names
  })
  
  if (!is.null(rownames(df))) {
    names(matrix_list) <- rownames(df)
  }
  
  return(matrix_list)
}
```

```{r}
shuffled_grid_list <- df_to_matrix_list(shuffled_incorrect)
```

### First Time

```{r, eval=FALSE}
startTime <- Sys.time()

db_gen <- multi_mcmc(1000, 100, "annealing dynamic", 0.9, 200, record_board = TRUE, 
                     boardlist=shuffled_grid_list[names(shuffled_grid_list)[1:100]], 
                     card_name = "bee_meadow")
endTime <- Sys.time()
print(endTime - startTime)

write.csv(db_gen, here::here("database-CORRECTED.csv"), row.names = FALSE)
```
```{r}
#delete chunk
temp <- df_to_matrix_list(db_gen[1:20])
score_grid(matrix(c(t(db_gen[17,1:20])),nrow=4,ncol=5,byrow=T), individual=TRUE)

#   bear_score = c(first_row[1]),
#   bee_score = c(first_row[2]),
#   meadow_score = c(first_row[3]),
#   trout_score = c(first_row[4]),
#   eagle_score = c(first_row[5]),
#   rabbit_score = c(first_row[6]),
#   dragonfly_score = c(first_row[7]),
#   fox_score = c(first_row[8]),
#   deer_score = c(first_row[9]),
#   stream_score = c(first_row[10]),
#   wolves_score = c(first_row[11]),
#   dv_score = c(first_row[12])
```


### Subsequent

```{r, eval=FALSE}
startTime <- Sys.time()

db_gen <- multi_mcmc(1000, 4000, "annealing dynamic", 0.9, 200, record_board = TRUE,
                     boardlist=shuffled_grid_list[names(shuffled_grid_list)[46001:50000]], 
                     card_name = "low_eagle_rabbit")
endTime <- Sys.time()
print(endTime - startTime)

database_old <- read.csv(here::here("database-CORRECTED.csv"))
database_new <- rbind(database_old, db_gen)
database_new <- database_new %>% distinct()
write.csv(database_new, here::here("database-CORRECTED.csv"), row.names = FALSE)
```

```{r, eval=FALSE}
head(db_gen)
```

```{r}
database_new <- read.csv(here::here("database-CORRECTED.csv"))
```

```{r}
dist2 <- database_new %>%
  group_by(pool) %>%
  summarize(count = n())
dist2
```


```{r}
# Add the original IDs back

database_new_ID <- database_new %>%
  mutate(ID = ID_NEW$ID) %>%
  select(ID, 1:43) %>%
  arrange(ID)

# write.csv(database_new_ID, here::here("database-CORRECTED.csv"), row.names = FALSE)
```

### Displays

```{r}
database_new %>%
  mutate(score = as.numeric(score)) %>%
  filter(pool == "default") %>%
  ggplot(aes(x = score)) +
  geom_histogram(binwidth = 3, fill = "steelblue", color = "black")
```

```{r}
database_new %>%
  mutate(score = as.numeric(score)) %>%
  filter(pool == "dragonfly_stream") %>%
  ggplot(aes(x = score)) +
  geom_histogram(binwidth = 3, fill = "steelblue", color = "black")
```

```{r}
database_new %>%
  mutate(score = as.numeric(score)) %>%
  filter(pool == "bee_meadow") %>%
  ggplot(aes(x = score)) +
  geom_histogram(binwidth = 3, fill = "steelblue", color = "black")
```

```{r}
database_new %>%
  mutate(score = as.numeric(score)) %>%
  filter(pool == "low_eagle_rabbit") %>%
  ggplot(aes(x = score)) +
  geom_histogram(binwidth = 3, fill = "steelblue", color = "black")
```

## Clustering

```{r}
# database_new <- read.csv(here::here("database.csv"))
# 
# database_new_ID <- database_new %>%
#   mutate(ID = rep(1:50000)) %>%
#   select(ID, 1:22)
# 
# write.csv(database_new_ID, here::here("database.csv"), row.names = FALSE)
```

```{r}
# database <- read.csv(here::here("database-CORRECTED.csv"))
```

```{r}
# database_new <- database %>%
#   select(1:23)
# 
# write.csv(database_new, here::here("database-CORRECTED-a.csv"), row.names = FALSE)
```

```{r}
# database_start <- database %>%
#   select(1,25:44,24)
# 
# write.csv(database_start, here::here("database-CORRECTED-s.csv"), row.names = FALSE)
```

```{r}
database_new <- read.csv(here::here("database-CORRECTED-a.csv"))
```

```{r}
grids <- database_new %>% select(-c(ID, pool))

dmy <- dummyVars(" ~ .", data = grids)

grids <- data.frame(predict(dmy, newdata = grids))

grids_matrix <- as.matrix(grids)

```

```{r}
set.seed(4)
km_spec1 <- k_means(num_clusters = 4)

grids_recipe <- recipe(~., data = grids_matrix)

km_wflow1 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec1)

km_fitted1 <- km_wflow1 |> fit(grids_matrix)

km_fitted1 |> extract_centroids()

grids_km1 <- kmeans(grids_matrix, centers = 4)

grids_km1$totss
grids_km1$withinss
grids_km1$betweenss
```

```{r}
x <- km_fitted1 |> extract_centroids()
x
```

```{r}
pc <- prcomp(grids_matrix)
```

```{r}
cumul_vars <- cumsum(pc$sdev^2)/sum(pc$sdev^2)
cumul_vars
```

```{r}
grids_reduced <- pc$x[, 1:8]

grids_pca_km <- kmeans(grids_reduced, 4)

grids_pca_km$totss
grids_pca_km$withinss
grids_pca_km$betweenss
```

```{r}
pc$rotation[,1:2]
```

### With score removed

```{r}
# No lowest
grids <- database_new %>%
  filter(score > 57) %>%
  select(-c(ID, pool))

dmy <- dummyVars(" ~ .", data = grids)

grids <- data.frame(predict(dmy, newdata = grids))
```

```{r}
grids_noscore <- grids %>%
  select(-c(score))

noscore_matrix <- as.matrix(grids_noscore)
```

```{r}
# write.csv(grids_noscore, here::here("grids_noscore-CORRECTED.csv"), row.names = FALSE)
```


```{r}
set.seed(4)
km_spec2 <- k_means(num_clusters = 3)
grids_recipe <- recipe(~., data = noscore_matrix)

km_wflow2 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec2)

km_fitted2 <- km_wflow2 |> fit(noscore_matrix)

km_fitted2 |> extract_centroids()

grids_km2 <- kmeans(noscore_matrix, centers = 3)

grids_km2$totss
grids_km2$withinss
grids_km2$betweenss
```

```{r}
set.seed(4)
km_spec2 <- k_means(num_clusters = 4)
grids_recipe <- recipe(~., data = noscore_matrix)

km_wflow2 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec2)

km_fitted2 <- km_wflow2 |> fit(noscore_matrix)

km_fitted2 |> extract_centroids()

grids_km2 <- kmeans(noscore_matrix, centers = 4)

grids_km2$totss
grids_km2$withinss
grids_km2$betweenss
```

```{r}
set.seed(4)
km_spec2 <- k_means(num_clusters = 5)
grids_recipe <- recipe(~., data = noscore_matrix)

km_wflow2 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec2)

km_fitted2 <- km_wflow2 |> fit(noscore_matrix)

km_fitted2 |> extract_centroids()

grids_km2 <- kmeans(noscore_matrix, centers = 5)

grids_km2$totss
grids_km2$withinss
grids_km2$betweenss
```

```{r}
set.seed(4)
km_spec2 <- k_means(num_clusters = 6)
grids_recipe <- recipe(~., data = noscore_matrix)

km_wflow2 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec2)

km_fitted2 <- km_wflow2 |> fit(noscore_matrix)

km_fitted2 |> extract_centroids()

grids_km2 <- kmeans(noscore_matrix, centers = 6)

grids_km2$totss
grids_km2$withinss
grids_km2$betweenss
```

```{r}
set.seed(4)
km_spec2 <- k_means(num_clusters = 7)
grids_recipe <- recipe(~., data = noscore_matrix)

km_wflow2 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec2)

km_fitted2 <- km_wflow2 |> fit(noscore_matrix)

km_fitted2 |> extract_centroids()

grids_km2 <- kmeans(noscore_matrix, centers = 7)

grids_km2$totss
grids_km2$withinss
grids_km2$betweenss
```

```{r}
set.seed(4)
km_spec2 <- k_means(num_clusters = 8)
grids_recipe <- recipe(~., data = noscore_matrix)

km_wflow2 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec2)

km_fitted2 <- km_wflow2 |> fit(noscore_matrix)

km_fitted2 |> extract_centroids()

grids_km2 <- kmeans(noscore_matrix, centers = 8)

grids_km2$totss
grids_km2$withinss
grids_km2$betweenss
```

```{r}
km_fitted2 |> extract_centroids()
```

```{r}
km_fitted2 %>% extract_cluster_assignment()
```

```{r}
database_new %>%
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            p25th=quantile(score,probs=0.25),
            median=quantile(score,probs=0.5),
            p75th=quantile(score,probs=0.75),
            count=n())
```


```{r}
database_lowest_removed <- database_new %>%
  filter(score > 57)
```

```{r}
database1 <- database_lowest_removed %>%
  mutate(`7cluster` = extract_cluster_assignment(km_fitted2)$.cluster)
```

```{r}
summarized <- database1 %>%
  group_by(`7cluster`) %>%
  summarise(mean_score=mean(score),
            sd_score=sd(score),
            .groups = 'drop') 
summarized
```

```{r}
write.csv(summarized, here::here("score_removed_c_summary.csv"), row.names = FALSE)
```


```{r}
database1 %>%
  group_by(cluster) %>%
  summarise(mean_score=mean(score),
            sd_score=sd(score),
            count=n(),
            .groups = 'drop') 
```

```{r}
database1 %>%
  group_by(cluster) %>%
  summarise(mean_score=mean(score),
            sd_score=sd(score),
            count=n(),
            .groups = 'drop') 
```


### With individual scores and lowest removed

```{r}
summary(database_new$score)
```

```{r}
database_new3 <- database_new %>%
  filter(score > 57) %>%
  select(-c(ID,pool,score))

ID_cols <- database_new %>%
  filter(score > 57) %>%
  select(ID)
```

```{r, eval=FALSE}
# Run once

# first_row <- score_grid(matrix(c(t(database_new3[1,])),nrow=4,ncol=5,byrow=T), individual=TRUE)
# 
# db_individual <- data.frame(
#   bear_score = c(first_row[1]),
#   bee_score = c(first_row[2]),
#   meadow_score = c(first_row[3]),
#   trout_score = c(first_row[4]),
#   eagle_score = c(first_row[5]),
#   rabbit_score = c(first_row[6]),
#   dragonfly_score = c(first_row[7]),
#   fox_score = c(first_row[8]),
#   deer_score = c(first_row[9]),
#   stream_score = c(first_row[10]),
#   wolves_score = c(first_row[11]),
#   dv_score = c(first_row[12])
# )
# 
# for(i in 2:nrow(database_new3)){
#   row <- as.list(score_grid(matrix(c(t(database_new3[i,])),nrow=4,ncol=5,byrow=T), individual=TRUE))
#   db_individual <- rbind(db_individual, row)
# }
```

```{r}
# db_individual_ID <- db_individual %>%
#   mutate(ID = ID_cols$ID) %>%
#   select(ID, 1:12)
# 
# write.csv(db_individual_ID, here::here("db_individual_lowest_removed-CORRECTED.csv"), row.names = FALSE)
```

```{r}
db_individual_removed <- read.csv(here::here("db_individual_lowest_removed.csv"))

db_individual_removed <- db_individual_removed %>%
  select(-ID)

individual_matrix <- as.matrix(db_individual_removed)
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 3)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 3)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 4)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 4)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 5)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 5)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 6)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 6)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 7)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 7)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
centroids <- km_fitted3 |> extract_centroids()
centroids
```

```{r}
database_lowest_removed <- database_new %>%
  filter(score > 61)
```

```{r}
database3 <- database_lowest_removed %>%
  mutate(cluster = extract_cluster_assignment(km_fitted3)$.cluster)
```

```{r}
database3 %>%
  group_by(cluster) %>%
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            p25th=quantile(score,probs=0.25),
            median=quantile(score,probs=0.5),
            p75th=quantile(score,probs=0.75),
            count=n(),
            .groups = 'drop')
```

#### Normalizing

```{r}
db_individual_removed <- read.csv(here::here("db_individual_lowest_removed-CORRECTED.csv"))

db_individual_removed <- db_individual_removed %>%
  select(-ID)
```

```{r}
db_scaled <- data.frame(lapply(db_individual_removed,scale))
```

```{r}
individual_matrix <- as.matrix(db_scaled)
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 3)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 3)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```


```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 4)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 4)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```


```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 5)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 5)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 6)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 6)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```


```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 7)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 7)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 8)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 8)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
set.seed(4)
km_spec3 <- k_means(num_clusters = 9)
grids_recipe <- recipe(~., data = individual_matrix)

km_wflow3 <- workflow() |>
  add_recipe(grids_recipe) |>
  add_model(km_spec3)

km_fitted3 <- km_wflow3 |> fit(individual_matrix)

km_fitted3 |> extract_centroids()

grids_km3 <- kmeans(individual_matrix, centers = 9)

grids_km3$totss
grids_km3$withinss
grids_km3$betweenss
```

```{r}
# wcss <- data.frame(
#   k = rep(7, 7),
#   wcss = grids_km3$withinss
# )
```

```{r}
# wcss2 <- data.frame(
#   k = rep(9, 9),
#   wcss = grids_km3$withinss
# )
# 
# wcss <- rbind(wcss, wcss2)
```

```{r}
# write.csv(wcss, here::here("wcss-CORRECTED.csv"), row.names = FALSE)
```

```{r}
wcss <- read.csv(here::here("wcss-CORRECTED.csv"))
```


```{r}
wcss_means <- wcss %>%
  group_by(k) %>%
  summarize(mean = mean(wcss))
wcss_means
```


```{r}
ggplot(aes(x = k, y = wcss), data=wcss) +
  geom_point() +
  geom_point(aes(x=k, y=mean, color="red"), data=wcss_means) +
  labs(x = "K", y="Within Cluster Sums of Square") +
  theme_minimal() +
  theme(panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank(),
        legend.position = "none")
```


```{r}
centroids <- km_fitted3 |> extract_centroids()
centroids
```

```{r}
centroids <- km_fitted3 |> extract_centroids()
centroids
```

```{r}
database_lowest_removed <- database_new %>%
  filter(score > 57)
```

```{r}
database4 <- database_lowest_removed %>%
  mutate(`7cluster_seed4` = extract_cluster_assignment(km_fitted3)$.cluster)
```

```{r}
database4 <- database4 %>%
  mutate(`7cluster_seed5` = extract_cluster_assignment(km_fitted3)$.cluster)
```

```{r}
seed <- database4 %>%
  group_by(`7cluster_seed41`) %>%
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            .groups = 'drop') %>%
  arrange(desc(mean_score))
seed
```

```{r}
# write.csv(seed, here::here("7cluster_seed.csv"), row.names = FALSE)
```


```{r}
database_new %>% 
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            min=quantile(score, probs=0),
            p25th=quantile(score,probs=0.25),
            median=quantile(score,probs=0.5),
            p75th=quantile(score,probs=0.75),
            max=quantile(score, probs=1)
            )
```

#### For database

```{r}
database_lowest_removed <- database_new %>%
  filter(score > 57)
```

```{r}
database3 <- database_lowest_removed %>%
  mutate(`7cluster` = extract_cluster_assignment(km_fitted3)$.cluster)
```

```{r}
database3 <- database3 %>%
  mutate(`7cluster_s5` = extract_cluster_assignment(km_fitted3)$.cluster)
```

```{r}
database3 %>%
  group_by(`6cluster`) %>%
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            p25th=quantile(score,probs=0.25),
            median=quantile(score,probs=0.5),
            p75th=quantile(score,probs=0.75),
            count=n(),
            .groups = 'drop') %>%
  arrange(desc(mean_score))
```




```{r}
# write.csv(database3, here::here("normalized_clusters-CORRECTED.csv"), row.names = FALSE)
```

```{r}
cluster_data <- read.csv(here::here("normalized_clusters-CORRECTED.csv"))
```

```{r}
sum((cluster_data %>% select(X6cluster)) == (cluster_data %>% select(X6cluster_s5)))
sum((cluster_data %>% select(X6cluster)) == (cluster_data %>% select(X6cluster_s6)))
sum((cluster_data %>% select(X6cluster_s5)) == (cluster_data %>% select(X6cluster_s6)))
nrow(cluster_data)
```


```{r}
cluster_data %>%
  group_by(X7cluster) %>%
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            p25th=quantile(score,probs=0.25),
            median=quantile(score,probs=0.5),
            p75th=quantile(score,probs=0.75),
            count=n(),
            .groups = 'drop')
```


## Inferences

```{r}
count_prop <- function(card_name, database){
  df_pos <- data.frame(
    row1col1 = as.numeric(nrow(database %>% filter(row1col1 == card_name))),
    row1col2 = as.numeric(nrow(database %>% filter(row1col2 == card_name))),
    row1col3 = as.numeric(nrow(database %>% filter(row1col3 == card_name))),
    row1col4 = as.numeric(nrow(database %>% filter(row1col4 == card_name))),
    row1col5 = as.numeric(nrow(database %>% filter(row1col5 == card_name))),
    row2col1 = as.numeric(nrow(database %>% filter(row2col1 == card_name))),
    row2col2 = as.numeric(nrow(database %>% filter(row2col2 == card_name))),
    row2col3 = as.numeric(nrow(database %>% filter(row2col3 == card_name))),
    row2col4 = as.numeric(nrow(database %>% filter(row2col4 == card_name))),
    row2col5 = as.numeric(nrow(database %>% filter(row2col5 == card_name))),
    row3col1 = as.numeric(nrow(database %>% filter(row3col1 == card_name))),
    row3col2 = as.numeric(nrow(database %>% filter(row3col2 == card_name))),
    row3col3 = as.numeric(nrow(database %>% filter(row3col3 == card_name))),
    row3col4 = as.numeric(nrow(database %>% filter(row3col4 == card_name))),
    row3col5 = as.numeric(nrow(database %>% filter(row3col5 == card_name))),
    row4col1 = as.numeric(nrow(database %>% filter(row4col1 == card_name))),
    row4col2 = as.numeric(nrow(database %>% filter(row4col2 == card_name))),
    row4col3 = as.numeric(nrow(database %>% filter(row4col3 == card_name))),
    row4col4 = as.numeric(nrow(database %>% filter(row4col4 == card_name))),
    row4col5 = as.numeric(nrow(database %>% filter(row4col5 == card_name)))
  )
  
  df_pos_per <- apply(df_pos, 1, function(x) x/sum(x))

  row <- c("row1", "row2", "row3", "row4")
  col <- c("col1", "col2", "col3", "col4", "col5")
  df_hm <- expand.grid(col = col, row = row)
  df_hm <- df_hm %>%
    mutate(proportion = df_pos_per[,1])
  
  return(df_hm)
  
}
```

```{r}
# bear_pos <- data.frame(
#   row1col1 = as.numeric(nrow(database_new %>% filter(row1col1 == "Bear"))),
#   row1col2 = as.numeric(nrow(database_new %>% filter(row1col2 == "Bear"))),
#   row1col3 = as.numeric(nrow(database_new %>% filter(row1col3 == "Bear"))),
#   row1col4 = as.numeric(nrow(database_new %>% filter(row1col4 == "Bear"))),
#   row1col5 = as.numeric(nrow(database_new %>% filter(row1col5 == "Bear"))),
#   row2col1 = as.numeric(nrow(database_new %>% filter(row2col1 == "Bear"))),
#   row2col2 = as.numeric(nrow(database_new %>% filter(row2col2 == "Bear"))),
#   row2col3 = as.numeric(nrow(database_new %>% filter(row2col3 == "Bear"))),
#   row2col4 = as.numeric(nrow(database_new %>% filter(row2col4 == "Bear"))),
#   row2col5 = as.numeric(nrow(database_new %>% filter(row2col5 == "Bear"))),
#   row3col1 = as.numeric(nrow(database_new %>% filter(row3col1 == "Bear"))),
#   row3col2 = as.numeric(nrow(database_new %>% filter(row3col2 == "Bear"))),
#   row3col3 = as.numeric(nrow(database_new %>% filter(row3col3 == "Bear"))),
#   row3col4 = as.numeric(nrow(database_new %>% filter(row3col4 == "Bear"))),
#   row3col5 = as.numeric(nrow(database_new %>% filter(row3col5 == "Bear"))),
#   row4col1 = as.numeric(nrow(database_new %>% filter(row4col1 == "Bear"))),
#   row4col2 = as.numeric(nrow(database_new %>% filter(row4col2 == "Bear"))),
#   row4col3 = as.numeric(nrow(database_new %>% filter(row4col3 == "Bear"))),
#   row4col4 = as.numeric(nrow(database_new %>% filter(row4col4 == "Bear"))),
#   row4col5 = as.numeric(nrow(database_new %>% filter(row4col5 == "Bear")))
# )
# 
# bear_pos_per <- apply(bear_pos, 1, function(x) x/sum(x))
# 
# row <- c("row1", "row2", "row3", "row4")
# col <- c("col1", "col2", "col3", "col4", "col5")
# bear_hm <- expand.grid(col = col, row = row)
# bear_hm <- bear_hm %>%
#   mutate(proportion = bear_pos_per[,1])
```

```{r}
make_heatmap <- function(df, title){
  ggplot(aes(x=col, y=row, fill=proportion), data=df) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  labs(title=title)
}
```

```{r}
# make_heatmap(count_prop("Bear", database_new), "Bear")
```

```{r}
# make_heatmap(count_prop("Bee", database_new), "Bee")
```

```{r}
# make_heatmap(count_prop("Meadow", database_new), "Meadow")
```

```{r}
# make_heatmap(count_prop("Trout", database_new), "Trout")
```

```{r}
# make_heatmap(count_prop("Eagle", database_new), "Eagle")
```

```{r}
# make_heatmap(count_prop("Rabbit", database_new), "Rabbit")
```

```{r}
# make_heatmap(count_prop("Dragonfly", database_new), "Dragonfly")
```

```{r}
# make_heatmap(count_prop("Fox", database_new), "Fox")
```

```{r}
# make_heatmap(count_prop("Deer", database_new), "Deer")
```

```{r}
# make_heatmap(count_prop("Stream", database_new), "Stream")
```

```{r}
# make_heatmap(count_prop("Wolf", database_new), "Wolf")
```

```{r}
bind_7clusters <- function(cluster_num){
  rbind(count_prop("Bear", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Bear"),
        count_prop("Bee", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Bee"),
        count_prop("Meadow", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Meadow"),
        count_prop("Trout", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Trout"),
        count_prop("Eagle", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Eagle"),
        count_prop("Rabbit", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Rabbit"),
        count_prop("Dragonfly", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Dragonfly"),
        count_prop("Fox", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Fox"),
        count_prop("Deer", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Deer"),
        count_prop("Stream", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Stream"),
        count_prop("Wolf", 
           df <- cluster_data %>%
              filter(X7cluster == cluster_num)) %>% mutate(cluster = cluster_num, card = "Wolf")
  )
}
```

```{r}
cluster_position <- rbind(bind_7clusters("Cluster_1"),
                          bind_7clusters("Cluster_2"),
                          bind_7clusters("Cluster_3"),
                          bind_7clusters("Cluster_4"),
                          bind_7clusters("Cluster_5"),
                          bind_7clusters("Cluster_6"),
                          bind_7clusters("Cluster_7")
                    )
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position %>% filter(card == "Bear"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Bear")
```

```{r}
overall_position <- rbind(count_prop("Bear", database_new) %>% mutate(card = "Bear"),
                          count_prop("Bee", database_new) %>% mutate(card = "Bee"),
                          count_prop("Meadow", database_new) %>% mutate(card = "Meadow"),
                          count_prop("Trout", database_new) %>% mutate(card = "Trout"),
                          count_prop("Eagle", database_new) %>% mutate(card = "Eagle"),
                          count_prop("Rabbit", database_new) %>% mutate(card = "Rabbit"),
                          count_prop("Dragonfly", database_new) %>% mutate(card = "Dragonfly"),
                          count_prop("Fox", database_new) %>% mutate(card = "Fox"),
                          count_prop("Deer", database_new) %>% mutate(card = "Deer"),
                          count_prop("Stream", database_new) %>% mutate(card = "Stream"),
                          count_prop("Wolf", database_new) %>% mutate(card = "Wolf")
                          )
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(overall_position)) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(card)) +
  labs(title="Bear positions across clusters")
```


### Cluster Inferences

```{r}
cluster_table <- function(Xcluster, cluster_num, cluster_data){
  df <- cluster_data %>%
    filter(
      case_when(
        Xcluster == 7 ~ X7cluster == cluster_num,
        Xcluster == 6 ~ X6cluster == cluster_num,
        Xcluster == 5 ~ X5cluster == cluster_num,
        Xcluster == 4 ~ X4cluster == cluster_num,
        Xcluster == 3 ~ X3cluster == cluster_num
      )
    ) %>%
    summarize(mean_score=mean(score),
              sd_score=sd(score),
              p25th=quantile(score,probs=0.25),
              median=quantile(score,probs=0.5),
              p75th=quantile(score,probs=0.75),
              count=n(),
              .groups = 'drop')
  return(df)
}
```

```{r}
cluster_prop <- function(Xcluster, cluster_num, database){
  df <- database %>%
    filter(
      case_when(
        Xcluster == 7 ~ X7cluster == cluster_num,
        Xcluster == 6 ~ X6cluster == cluster_num,
        Xcluster == 5 ~ X5cluster == cluster_num,
        Xcluster == 4 ~ X4cluster == cluster_num,
        Xcluster == 3 ~ X3cluster == cluster_num,
        Xcluster == 8 ~ X8cluster == cluster_num,
        Xcluster == 65 ~ X6cluster_s5 == cluster_num,
        Xcluster == 66 ~ X6cluster_s6 == cluster_num,
        Xcluster == 85 ~ X8cluster_s5 == cluster_num,
        Xcluster == 75 ~ X7cluster_s5 == cluster_num
      )
    )
  
  bear_count = 0
  bee_count = 0
  meadow_count = 0
  trout_count = 0
  eagle_count = 0
  rabbit_count = 0
  dragonfly_count = 0
  fox_count = 0
  deer_count = 0
  stream_count = 0
  wolf_count = 0
      
  for (j in 2:21){
    for(i in 1:nrow(df)){
      
      if(df[i,j] == "Bear"){
        bear_count = bear_count + 1
      }else if(df[i,j] == "Bee"){
        bee_count = bee_count + 1
      }else if(df[i,j] == "Meadow"){
        meadow_count = meadow_count + 1
      }else if(df[i,j] == "Trout"){
        trout_count = trout_count + 1
      }else if(df[i,j] == "Eagle"){
        eagle_count = eagle_count + 1
      }else if(df[i,j] == "Rabbit"){
        rabbit_count = rabbit_count + 1
      }else if(df[i,j] == "Dragonfly"){
        dragonfly_count = dragonfly_count + 1
      }else if(df[i,j] == "Fox"){
        fox_count = fox_count + 1
      }else if(df[i,j] == "Deer"){
        deer_count = deer_count + 1
      }else if(df[i,j] == "Stream"){
        stream_count = stream_count + 1
      }else if(df[i,j] == "Wolf"){
        wolf_count = wolf_count + 1
      }else{
        print("bugged")
      }
      
    }
  }
  
  df_prop <- data.frame(
    name = c("bear", "bee", "meadow", "trout", "eagle", "rabbit",
               "dragonfly", "fox", "deer", "stream", "wolf"),
    proportion = c(bear_count/(nrow(df)*20),
                bee_count/(nrow(df)*20),
                meadow_count/(nrow(df)*20),
                trout_count/(nrow(df)*20),
                eagle_count/(nrow(df)*20),
                rabbit_count/(nrow(df)*20),
                dragonfly_count/(nrow(df)*20),
                fox_count/(nrow(df)*20),
                deer_count/(nrow(df)*20),
                stream_count/(nrow(df)*20),
                wolf_count/(nrow(df)*20)),
    true_prop = c(12/130,
                  8/130,
                  20/130,
                  10/130,
                  8/130,
                  8/130,
                  8/130,
                  12/130,
                  12/130,
                  20/130,
                  12/130)
  )
  
  return(df_prop)
}
```

```{r}
make_bars <- function(df, title){
  ggplot(aes(x = reorder(name, -proportion), y = proportion, fill = reorder(name, -proportion)), data=df) + 
    geom_bar(stat = "identity") +
    scale_fill_brewer(palette="PRGn", direction = -1) +
    labs(x = "card", title=title) +
    theme(legend.position = "none")
}
```

```{r}
exact_card_count <- function(Xcluster=NULL, cluster_num=NULL, database){

  bear_exact <- rep(0, 13)
  bee_exact <- rep(0, 9)
  meadow_exact <- rep(0, 21)
  trout_exact <- rep(0, 11)
  eagle_exact <- rep(0, 9)
  rabbit_exact <- rep(0, 9)
  dragonfly_exact <- rep(0, 9)
  fox_exact <- rep(0, 13)
  deer_exact <- rep(0, 13)
  stream_exact <- rep(0, 21)
  wolf_exact <- rep(0, 13)
  
  if(is.null(Xcluster) && is.null(cluster_num)){
    df <- database %>%
      filter(pool == "default")
  }else{
    df <- database %>%
    filter(
      case_when(
        Xcluster == 7 ~ X7cluster == cluster_num,
        Xcluster == 6 ~ X6cluster == cluster_num,
        Xcluster == 5 ~ X5cluster == cluster_num,
        Xcluster == 4 ~ X4cluster == cluster_num,
        Xcluster == 3 ~ X3cluster == cluster_num
      )
    )
  }
  
  
  for(i in 1:nrow(df)){
    bear_count <- 0
    bee_count <- 0
    meadow_count <- 0
    trout_count <- 0
    eagle_count <- 0
    rabbit_count <- 0
    dragonfly_count <- 0
    fox_count <- 0
    deer_count <- 0
    stream_count <- 0
    wolf_count <- 0
    
    for(j in 2:21){
      if(df[i,j] == "Bear"){
        bear_count = bear_count + 1
      }else if(df[i,j] == "Bee"){
        bee_count = bee_count + 1
      }else if(df[i,j] == "Meadow"){
        meadow_count = meadow_count + 1
      }else if(df[i,j] == "Trout"){
        trout_count = trout_count + 1
      }else if(df[i,j] == "Eagle"){
        eagle_count = eagle_count + 1
      }else if(df[i,j] == "Rabbit"){
        rabbit_count = rabbit_count + 1
      }else if(df[i,j] == "Dragonfly"){
        dragonfly_count = dragonfly_count + 1
      }else if(df[i,j] == "Fox"){
        fox_count = fox_count + 1
      }else if(df[i,j] == "Deer"){
        deer_count = deer_count + 1
      }else if(df[i,j] == "Stream"){
        stream_count = stream_count + 1
      }else if(df[i,j] == "Wolf"){
        wolf_count = wolf_count + 1
      }else{
        print("bugged")
      }
    }
    
    bear_exact[bear_count+1] = bear_exact[bear_count+1] + 1
    bee_exact[bee_count+1] = bee_exact[bee_count+1] + 1
    meadow_exact[meadow_count+1] = meadow_exact[meadow_count+1] + 1
    trout_exact[trout_count+1] = trout_exact[trout_count+1] + 1
    eagle_exact[eagle_count+1] = eagle_exact[eagle_count+1] + 1
    rabbit_exact[rabbit_count+1] = rabbit_exact[rabbit_count+1] + 1
    dragonfly_exact[dragonfly_count+1] = dragonfly_exact[dragonfly_count+1] + 1
    fox_exact[fox_count+1] = fox_exact[fox_count+1] + 1
    deer_exact[deer_count+1] = deer_exact[deer_count+1] + 1
    stream_exact[stream_count+1] = stream_exact[stream_count+1] + 1
    wolf_exact[wolf_count+1] = wolf_exact[wolf_count+1] + 1
    
  }
  
  bear_exact[8] = bear_exact[8]+bear_exact[9]+bear_exact[10]+
    bear_exact[11]+bear_exact[12]+bear_exact[13]
  
  bee_exact[8] = bee_exact[8]+bee_exact[9]
  
  meadow_exact[8] = meadow_exact[8]+meadow_exact[9]+meadow_exact[10]+
    meadow_exact[11]+meadow_exact[12]+meadow_exact[13]+meadow_exact[14]+
    meadow_exact[15]+meadow_exact[16]+meadow_exact[17]+meadow_exact[18]+
    meadow_exact[19]+meadow_exact[20]+meadow_exact[21]
  
  trout_exact[8] = trout_exact[8]+trout_exact[9]+trout_exact[10]+
    trout_exact[11]
  
  eagle_exact[8] = eagle_exact[8]+eagle_exact[9]
  
  rabbit_exact[8] = rabbit_exact[8]+rabbit_exact[9]
  
  dragonfly_exact[8] = dragonfly_exact[8]+dragonfly_exact[9]
  
  fox_exact[8] = fox_exact[8]+fox_exact[9]+fox_exact[10]+
    fox_exact[11]+fox_exact[12]+fox_exact[13]
  
  deer_exact[8] = deer_exact[8]+deer_exact[9]+deer_exact[10]+
    deer_exact[11]+deer_exact[12]+deer_exact[13]
  
  stream_exact[8] = stream_exact[8]+stream_exact[9]+stream_exact[10]+
    stream_exact[11]+stream_exact[12]+stream_exact[13]+stream_exact[14]+
    stream_exact[15]+stream_exact[16]+stream_exact[17]+stream_exact[18]+
    stream_exact[19]+stream_exact[20]+stream_exact[21]
  
  wolf_exact[8] = wolf_exact[8]+wolf_exact[9]+wolf_exact[10]+
    wolf_exact[11]+wolf_exact[12]+wolf_exact[13]
  
  bear_exact = bear_exact[1:8]
  bee_exact = bee_exact[1:8]
  meadow_exact = meadow_exact[1:8]
  trout_exact = trout_exact[1:8]
  eagle_exact = eagle_exact[1:8]
  rabbit_exact = rabbit_exact[1:8]
  dragonfly_exact = dragonfly_exact[1:8]
  fox_exact = fox_exact[1:8]
  deer_exact = deer_exact[1:8]
  stream_exact = stream_exact[1:8]
  wolf_exact = wolf_exact[1:8]
  
  result <- data.frame(
    card = c(rep("Bear", 8), 
             rep("Bee", 8),
             rep("Meadow", 8),
             rep("Trout", 8),
             rep("Eagle", 8),
             rep("Rabbit", 8),
             rep("Dragonfly", 8),
             rep("Fox", 8),
             rep("Deer", 8),
             rep("Stream", 8),
             rep("Wolf", 8)
             ),
    num_exact = c(seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7),
                  seq(0,7)
                  ),
    proportion = c(bear_exact/(nrow(df)),
              bee_exact/(nrow(df)),
              meadow_exact/(nrow(df)),
              trout_exact/(nrow(df)),
              eagle_exact/(nrow(df)),
              rabbit_exact/(nrow(df)),
              dragonfly_exact/(nrow(df)),
              fox_exact/(nrow(df)),
              deer_exact/(nrow(df)),
              stream_exact/(nrow(df)),
              wolf_exact/(nrow(df))
              )
    
  )
  
  return(result)
}
```

```{r}
make_exact_bars <- function(df, title){
  ggplot(aes(x = factor(num_exact),
           y = proportion,
           fill = factor(num_exact)),
         data =
           (df %>%
              filter(proportion != 0))
        ) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  facet_wrap(vars(card),scales = "free_x") +
  labs(x="Exact number of cards",
       fill="Exact number of cards",
       title=title)
}
```

### 7cluster Overall Proportions

```{r}
nrow(database_new %>% filter(pool == "default"))
```

```{r}
default_pool_props <- exact_card_count(database=database_new)
```

```{r}
ggplot(aes(x = factor(num_exact),
           y = proportion,
           fill = factor(num_exact)),
         data =
           (default_pool_props %>%
              filter(proportion != 0))
        ) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  facet_wrap(vars(card)) +
  labs(x="Exact number of cards",
       fill="Exact number of cards",
       title="Overall proportions of the default pool")
```


#### Cluster 7

Summary statistics for cluster 7

```{r}
# cluster_table(7, "Cluster_7", cluster_data)
```

Proportion of each card type out of all the cards in the cluster

```{r}
# make_bars(cluster_prop(7, "Cluster_7", cluster_data), "7Cluster: Cluster_7")
```

Distributions of the exact number of each card type out of all grids in the cluster

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_7", cluster_data), title="7Cluster: Cluster_7")
```

#### Cluster 6

```{r}
# cluster_table(7, "Cluster_6", cluster_data)
```

```{r}
# make_bars(cluster_prop(7, "Cluster_6", cluster_data), "7Cluster: Cluster_6")
```

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_6", cluster_data), title="7Cluster: Cluster_6")
```

#### Cluster 3

```{r}
# cluster_table(7, "Cluster_3", cluster_data)
```

```{r}
# make_bars(cluster_prop(7, "Cluster_3", cluster_data), "7Cluster: Cluster_3")
```

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_3", cluster_data), title="7Cluster: Cluster_3")
```

#### Cluster 4

```{r}
# cluster_table(7, "Cluster_4", cluster_data)
```

```{r}
# make_bars(cluster_prop(7, "Cluster_4", cluster_data), "7Cluster: Cluster_4")
```

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_4", cluster_data), title="7Cluster: Cluster_4")
```

#### Cluster 2

```{r}
# cluster_table(7, "Cluster_2", cluster_data)
```

```{r}
# make_bars(cluster_prop(7, "Cluster_2", cluster_data), "7Cluster: Cluster_2")
```

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_2", cluster_data), title="7Cluster: Cluster_2")
```

#### Cluster 1

```{r}
# cluster_table(7, "Cluster_1", cluster_data)
```

```{r}
# make_bars(cluster_prop(7, "Cluster_1", cluster_data), "7Cluster: Cluster_1")
```

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_1", cluster_data), title="7Cluster: Cluster_1")
```

#### Cluster 5

```{r}
# cluster_table(7, "Cluster_5", cluster_data)
```

```{r}
# make_bars(cluster_prop(7, "Cluster_5", cluster_data), "7Cluster: Cluster_5")
```

```{r}
# make_exact_bars(exact_card_count(7, "Cluster_5", cluster_data), title="7Cluster: Cluster_5")
```

## Additional Displays

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(overall_position)) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(card)) +
  labs(title="Positions across all 50,000")
```

```{r}
all_cluster_prop7_s5 <- rbind(cluster_prop(75, "Cluster_1", cluster_data) %>% mutate(cluster = "Cluster_1"),
                          cluster_prop(75, "Cluster_2", cluster_data) %>% mutate(cluster = "Cluster_2"),
                          cluster_prop(75, "Cluster_3", cluster_data) %>% mutate(cluster = "Cluster_3"),
                          cluster_prop(75, "Cluster_4", cluster_data) %>% mutate(cluster = "Cluster_4"),
                          cluster_prop(75, "Cluster_5", cluster_data) %>% mutate(cluster = "Cluster_5"),
                          cluster_prop(75, "Cluster_6", cluster_data) %>% mutate(cluster = "Cluster_6"),
                          cluster_prop(75, "Cluster_7", cluster_data) %>% mutate(cluster = "Cluster_7")
                          )
```

```{r}
# all_exact <- rbind(exact_card_count(7, "Cluster_1", cluster_data) %>% mutate(cluster = "Cluster_1"),
#                    exact_card_count(7, "Cluster_2", cluster_data) %>% mutate(cluster = "Cluster_2"),
#                    exact_card_count(7, "Cluster_3", cluster_data) %>% mutate(cluster = "Cluster_3"),
#                    exact_card_count(7, "Cluster_4", cluster_data) %>% mutate(cluster = "Cluster_4"),
#                    exact_card_count(7, "Cluster_5", cluster_data) %>% mutate(cluster = "Cluster_5"),
#                    exact_card_count(7, "Cluster_6", cluster_data) %>% mutate(cluster = "Cluster_6"),
#                    exact_card_count(7, "Cluster_7", cluster_data) %>% mutate(cluster = "Cluster_7")
#                    )
```

```{r}
# write.csv(all_exact, here::here("all_exact.csv"), row.names = FALSE)
```

```{r}
# write.csv(all_cluster_prop, here::here("cluster_prop6-CORRECTED.csv"), row.names = FALSE)
```

```{r}
cluster_position_renamed <- cluster_position %>%
  mutate(
      cluster = factor(cluster, levels = c(
      "Cluster_1", "Cluster_2", "Cluster_3", 
      "Cluster_4", "Cluster_5", "Cluster_6", "Cluster_7"
    ))) %>%
    mutate(cluster = fct_recode(cluster,
      "Bear" = "Cluster_1",
      "Fox" = "Cluster_2",
      "Meadow Bee" = "Cluster_3",
      "Eagle Rabbit" = "Cluster_4",
      "Wolf" = "Cluster_5",
      "Stream Trout Dragonfly" = "Cluster_6",
      "Stream Dragonfly" = "Cluster_7"
    ))
```

```{r}
all_cluster_prop <- read.csv(here::here("cluster_prop6-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:6)))
```

```{r}
all_cluster_prop_renamed <- all_cluster_prop %>%
    mutate(
      cluster = factor(cluster, levels = c(
      "Cluster_1", "Cluster_2", "Cluster_3", 
      "Cluster_4", "Cluster_5", "Cluster_6", "Cluster_7"
    ))) %>%
    mutate(cluster = fct_recode(cluster,
      "Bear" = "Cluster_1",
      "Fox" = "Cluster_2",
      "Meadow Bee" = "Cluster_3",
      "Eagle Rabbit" = "Cluster_4",
      "Wolf" = "Cluster_5",
      "Stream Trout Dragonfly" = "Cluster_6",
      "Stream Dragonfly" = "Cluster_7"
    ))
```

```{r}
all_exact <- read.csv(here::here("all_exact.csv")) 
```

```{r}
all_exact_renamed <- all_exact %>%
    mutate(
      cluster = factor(cluster, levels = c(
      "Cluster_1", "Cluster_2", "Cluster_3", 
      "Cluster_4", "Cluster_5", "Cluster_6", "Cluster_7"
    ))) %>%
    mutate(cluster = fct_recode(cluster,
      "Bear" = "Cluster_1",
      "Fox" = "Cluster_2",
      "Meadow Bee" = "Cluster_3",
      "Eagle Rabbit" = "Cluster_4",
      "Wolf" = "Cluster_5",
      "Stream Trout Dragonfly" = "Cluster_6",
      "Stream Dragonfly" = "Cluster_7"
    ))
```

```{r}
cluster_data_renamed <- cluster_data %>%
    mutate(
      X7cluster = factor(X7cluster, levels = c(
      "Cluster_1", "Cluster_2", "Cluster_3", 
      "Cluster_4", "Cluster_5", "Cluster_6", "Cluster_7"
    ))) %>%
    mutate(X7cluster = fct_recode(X7cluster,
      "Bear" = "Cluster_1",
      "Fox" = "Cluster_2",
      "Meadow Bee" = "Cluster_3",
      "Eagle Rabbit" = "Cluster_4",
      "Wolf" = "Cluster_5",
      "Stream Trout Dragonfly" = "Cluster_6",
      "Stream Dragonfly" = "Cluster_7"
    ))
```

```{r}
results_table <- cluster_data %>%
  group_by(X7cluster) %>%
  summarize(mean_score=mean(score),
            sd_score=sd(score),
            p25th=quantile(score,probs=0.25),
            median=quantile(score,probs=0.5),
            p75th=quantile(score,probs=0.75),
            count=n(),
            .groups = 'drop') %>%
  arrange(desc(mean_score))
results_table
```

```{r}
# write.csv(results_table, here::here("results_table.csv"), row.names = FALSE)
```

#### 7 cluster

```{r}
# write.csv(all_cluster_prop7, here::here("cluster_prop7-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop7 <- read.csv(here::here("cluster_prop7-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:7)))
```

```{r}
# cluster_data_renamed %>%
#   group_by(X7cluster) %>%
#   summarize(mean_score=mean(score),
#             sd_score=sd(score),
#             p25th=quantile(score,probs=0.25),
#             median=quantile(score,probs=0.5),
#             p75th=quantile(score,probs=0.75),
#             count=n(),
#             .groups = 'drop') %>%
#   arrange(desc(mean_score))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop7) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop7,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 7 clust s5

```{r}
# write.csv(all_cluster_prop7_s5, here::here("cluster_prop7_seed5-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop7_s5 <- read.csv(here::here("cluster_prop7_seed5-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:7)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop7_s5) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop7_s5,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 6 cluster

```{r}
# write.csv(all_cluster_prop6, here::here("cluster_prop6-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop6 <- read.csv(here::here("cluster_prop6-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:6)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop6) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop6,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 6 clust s5

```{r}
# write.csv(all_cluster_prop6_s5, here::here("cluster_prop6_seed5-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop6_s5 <- read.csv(here::here("cluster_prop6_seed5-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:6)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop6_s5) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop6_s5,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 6 clust s6

```{r}
# write.csv(all_cluster_prop6_s6, here::here("cluster_prop6_seed6-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop6_s6 <- read.csv(here::here("cluster_prop6_seed6-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:6)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop6_s6) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop6_s6,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 5 cluster

```{r}
# write.csv(all_cluster_prop5, here::here("cluster_prop5-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop5 <- read.csv(here::here("cluster_prop5-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:5)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop5) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop5,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 8 cluster

```{r}
# write.csv(all_cluster_prop8, here::here("cluster_prop8-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop8 <- read.csv(here::here("cluster_prop8-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:8)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop8) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop8,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

#### 8 clust s5

```{r}
# write.csv(all_cluster_prop8_s5, here::here("cluster_prop8_seed5-CORRECTED.csv"), row.names = FALSE)
```

```{r}
all_cluster_prop8_s5 <- read.csv(here::here("cluster_prop8_seed5-CORRECTED.csv")) %>%
  mutate(cluster = factor(cluster, levels = paste0("Cluster_", 1:8)))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop8_s5) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop8_s5,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "Card", y = "Proportion", fill="Card Type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```

```{r}
ggplot(aes(x = reorder(name, -true_prop), 
           y = proportion, 
           fill = reorder(name, -true_prop)), 
       data=all_cluster_prop_renamed) + 
  geom_bar(stat = "identity") +
  geom_point(aes(x = reorder(name, -true_prop), y= true_prop),
             color = "red",
             data=all_cluster_prop_renamed,
             show.legend = FALSE) +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(x = "card", fill="card type", title="Propotion of card types in each cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
        panel.grid.major = element_line(color = "black"),
        panel.grid.minor = element_line(color = "black"),
        panel.grid.major.x = element_blank(),  # Remove vertical major grid lines
        panel.grid.minor.x = element_blank()) +
  facet_wrap(vars(cluster))
```



```{r}
ggplot(all_cluster_prop, aes(x = proportion, y = cluster, color = reorder(name, -true_prop))) +
  geom_point(
    size = 3,
    alpha = 0.8,
    position = position_jitter(height = 0.2, seed = 110)
  ) +
  scale_color_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  labs(
    x = "Proportion", 
    y = "Cluster",
    color = "Card Type",
    title = "Card Proportions by Cluster"
  ) +
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    legend.position = "right",
    panel.grid.major = element_line(color = "black"),
  )
```

```{r}
ggplot(all_cluster_prop_renamed, aes(x = proportion, y = reorder(name, true_prop), color = cluster)) +
  geom_point(
    size = 3,
    position = position_jitter(height = 0.2, seed = 99)
  ) +
  scale_color_manual(values = c("#000000", "#ff7f00", "#4daf4a", "#984ea3", "#999999",
                                "#f781bf", "#66c2a5")) +
  labs(
    x = "Proportion", 
    y = "Card Type",
    color = "Cluster",
    title = "Card Proportions by Cluster"
  ) +
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    legend.position = "right",
    panel.grid.major = element_line(color = "black")
  )
```


```{r}
ggplot(aes(x = cluster,
           y = proportion,
           fill = factor(num_exact, levels = rev(0:7))),
         data = all_exact
        ) +
  geom_bar(position = "fill", stat = "identity") +
  scale_fill_viridis_d() +
  facet_wrap(vars(card)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(x="Clusters",
       fill="Exact number of cards",
       title="Exact number of cards in each cluster")
```

```{r}
ggplot(all_exact, aes(x = num_exact, y = proportion, color = cluster)) +
  geom_line(size = 0.5) +
  facet_wrap(~ card) +
  scale_x_continuous(breaks = 0:7) +
  labs(x = "Exact Number of Cards",
       y = "Proportion",
       color = "Cluster",
       title = "Exact number of cards in each cluster") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.text = element_text(size = 10, face = "bold"),
        panel.spacing = unit(1, "lines"))
```

```{r}
ggplot(all_exact_renamed, aes(x = num_exact, y = proportion, color = cluster)) +
  geom_point() +
  geom_line(size = 0.5) +
  facet_wrap(~ card) +
  scale_x_continuous(breaks = 0:7) +
  scale_color_manual(values = c("#000000", "#ff7f00", "#4daf4a", "#984ea3", "#999999",
                                "#f781bf", "#66c2a5")) +
  labs(x = "Exact Number of Cards",
       y = "Proportion",
       color = "Cluster",
       title = "Exact number of cards in each cluster") +
  theme_minimal() +
  theme(legend.position = "bottom",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.text = element_text(size = 10, face = "bold"),
        panel.spacing = unit(1, "lines"))
```

```{r}
ggplot(cluster_merge |>
         mutate(cluster = factor(X7cluster)),
       aes(x = score, color = cluster, linetype = cluster)) +
  # geom_density(size = 1.2) +
    stat_density(size = 1.1, geom="line",position="identity") +
  labs(x = "Score", y = "Density", color = "Cluster", linetype = "Cluster", title="Score distribution by cluster") +
  scale_color_viridis_d() +
  theme_minimal()
```


```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Bear"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Bear positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Bee"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Bee positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Meadow"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Meadow positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Trout"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Trout positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Eagle"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Eagle positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Rabbit"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Rabbit positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Dragonfly"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Dragonfly positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Fox"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Fox positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Deer"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Deer positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Stream"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Stream positions across clusters")
```

```{r}
ggplot(aes(x=col, y=row, fill=proportion), data=(cluster_position_renamed %>% filter(card == "Wolf"))) +
  geom_tile() +
  theme_minimal() +
  scale_fill_gradient(low="#F0F0F0", high="#006837") +
  facet_wrap(vars(cluster)) +
  labs(title="Wolf positions across clusters")
```

### Unclustered

```{r}
db_pos = read_csv(here::here("database.csv"))
```

```{r}
neighbors = db_pos |>
  filter(score > 60) |>
  select(!pool) |>
  pivot_longer(!c(ID, score), names_to = "position", values_to = "card") |>
  mutate(row = substr(position, start = 4, stop = 4),
         col = substr(position, start = 8, stop = 8),
         row = as.numeric(row),
         col = as.numeric(col))
```

```{r}

# neighboring card on right
neighbors = neighbors |>
  left_join(neighbors |>
              mutate(col = col - 1) |>
              rename(right_neighbor = card) |>
              select(ID, row, col, right_neighbor),
            join_by(ID, row, col))

# neighboring card on left
neighbors = neighbors |>
  left_join(neighbors |>
              mutate(col = col + 1) |>
              rename(left_neighbor = card) |>
              select(ID, row, col, left_neighbor),
            join_by(ID, row, col))

# neighboring card up
neighbors = neighbors |>
  left_join(neighbors |>
              mutate(row = row - 1) |>
              rename(up_neighbor = card) |>
              select(ID, row, col, up_neighbor),
            join_by(ID, row, col))

# neighboring card down
neighbors = neighbors |>
  left_join(neighbors |>
              mutate(row = row + 1) |>
              rename(down_neighbor = card) |>
              select(ID, row, col, down_neighbor),
            join_by(ID, row, col))
```

```{r}
neighbors |> head(10)

```

```{r}
neighbors_long = neighbors |>
  pivot_longer(!c(ID, score, position, row, col, card),
               names_to = "neighbor",
               values_to = "neighbor_card")
```

```{r}
neighbors_long |> head(10)
```

```{r}
neighbors_sum = neighbors_long |>
  filter(!is.na(neighbor_card)) |>
  group_by(card) |>
  count(neighbor_card) |>
  mutate(proportion = n / sum(n))
```

```{r}
ggplot(neighbors_sum,
       aes(x = card,
           y = neighbor_card,
           fill = proportion)) +
  geom_tile() + 
  scale_fill_distiller(palette = "Greens", direction = 1)
```

```{r}
ggplot(neighbors_sum,
       aes(x = card,
           fill = neighbor_card,
           y = proportion)) +
  geom_bar(position = "fill", stat = "identity") +
  scale_fill_viridis_d()
```

```{r}
ggplot(neighbors_sum,
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  facet_wrap(vars(card))
```

### Clustered

```{r}
db_cluster = read_csv(here::here("normalized_clusters.csv"))
```

```{r}
neighbors_cluster = db_cluster |>
  pivot_longer(!c(ID, pool, score, contains("cluster")),
               names_to = "position", values_to = "card") |>
  mutate(row = substr(position, start = 4, stop = 4),
         col = substr(position, start = 8, stop = 8),
         row = as.numeric(row),
         col = as.numeric(col))
```

```{r}

# neighboring card on right
neighbors_cluster = neighbors_cluster |>
  left_join(neighbors_cluster |>
              mutate(col = col - 1) |>
              rename(right_neighbor = card) |>
              select(ID, row, col, right_neighbor),
            join_by(ID, row, col))

# neighboring card on left
neighbors_cluster = neighbors_cluster |>
  left_join(neighbors_cluster |>
              mutate(col = col + 1) |>
              rename(left_neighbor = card) |>
              select(ID, row, col, left_neighbor),
            join_by(ID, row, col))

# neighboring card up
neighbors_cluster = neighbors_cluster |>
  left_join(neighbors_cluster |>
              mutate(row = row - 1) |>
              rename(up_neighbor = card) |>
              select(ID, row, col, up_neighbor),
            join_by(ID, row, col))

# neighboring card down
neighbors_cluster = neighbors_cluster |>
  left_join(neighbors_cluster |>
              mutate(row = row + 1) |>
              rename(down_neighbor = card) |>
              select(ID, row, col, down_neighbor),
            join_by(ID, row, col))
```

```{r}
neighbors_cluster |> head(10)

```

```{r}
neighbors_cluster_long = neighbors_cluster |>
  pivot_longer(!c(ID, pool, contains("cluster"), score, position, row, col, card),
               names_to = "neighbor",
               values_to = "neighbor_card")
```

```{r}
neighbors_cluster_long |> head(10)
```

### Additional Clustered neighbor

```{r}
neighbors_sum2 = neighbors_cluster_long |>
  filter(!is.na(neighbor_card)) |>
  group_by(card, `7cluster`) |>
  count(neighbor_card) |>
  mutate(proportion = n / sum(n))
```

```{r}
neighbors_sum2_renamed <- neighbors_sum2 %>%
    mutate(
      `7cluster` = factor(`7cluster`, levels = c(
      "Cluster_1", "Cluster_2", "Cluster_3", 
      "Cluster_4", "Cluster_5", "Cluster_6", "Cluster_7"
    ))) %>%
    mutate(`7cluster` = fct_recode(`7cluster`,
      "Bear" = "Cluster_1",
      "Fox" = "Cluster_2",
      "Meadow Bee" = "Cluster_3",
      "Eagle Rabbit" = "Cluster_4",
      "Wolf" = "Cluster_5",
      "Stream Trout Dragonfly" = "Cluster_6",
      "Stream Dragonfly" = "Cluster_7"
    )) %>%
  mutate(
      neighbor_card = factor(neighbor_card, levels = c(
      "Meadow", "Stream", "Bear", 
      "Deer", "Fox", "Wolf", "Trout", "Bee", 
      "Dragonfly", "Eagle", "Rabbit" 
    ))) %>%
  mutate(
      card = factor(card, levels = c(
      "Meadow", "Stream", "Bear", 
      "Deer", "Fox", "Wolf", "Trout", "Bee", 
      "Dragonfly", "Eagle", "Rabbit" 
    )))
```


```{r}
ggplot(neighbors_sum2,
       aes(x = `7cluster`,
           fill = neighbor_card,
           y = proportion)) +
  geom_bar(position = "fill", stat = "identity") +
  scale_fill_viridis_d() +
  facet_wrap(vars(card)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
```

```{r}
ggplot(neighbors_sum2_renamed,
       aes(x = `7cluster`,
           fill = neighbor_card,
           y = proportion)) +
  geom_bar(position = "fill", stat = "identity") +
  scale_fill_manual(values = c("#4daf4a", "#377eb8", "#000000", "#a65628", "#ff7f00",
                    "#999999", "#f781bf", "#ffff33", "#66c2a5", "#984ea3", "#fc8d62")) +
  facet_wrap(vars(card)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title = "Propotion of neighbor cards by cluster for each card type")
```


```{r}
ggplot(neighbors_sum2,
       aes(x = card,
           y = neighbor_card,
           fill = proportion)) +
  geom_tile() + 
  scale_fill_distiller(palette = "Greens", direction = 1) +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Bear"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Bear neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Bee"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Bee neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Meadow"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Meadow neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Trout"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Trout neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Eagle"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Eagle neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Rabbit"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Rabbit neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Dragonfly"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Dragonfly neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Fox"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Fox neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Deer"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Deer neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Stream"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Stream neighbors in each cluster")
```

```{r}
ggplot(neighbors_sum2 %>% filter(card == "Wolf"),
       aes(x = neighbor_card,
           y = proportion,
           fill = neighbor_card)) +
  geom_bar(stat = "identity") +
  scale_fill_viridis_d() +
  theme_minimal() +
  facet_wrap(vars(`7cluster`)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8)) +
  labs(title="Wolf neighbors in each cluster")
```

```{r}
db_individual_removed <- read.csv(here::here("db_individual_lowest_removed.csv"))
```

```{r}
cluster_merge <- merge(x = cluster_data, y = db_individual_removed, by = "ID")
```

```{r}
ggplot(aes(x = score), data = cluster_merge) +
  geom_histogram(binwidth = 5, fill = "green3") +
  theme_minimal() +
  facet_wrap(vars(X7cluster)) +
  labs(title="Score distribution by cluster")
```

```{r}
ggplot(cluster_merge, aes(x = score, color = factor(X7cluster))) +
  geom_density(size = 1.2) +
  labs(x = "Score", y = "Density", color = "Cluster", title="Score distribution by cluster") +
  theme_minimal()
```

```{r}
low_score = database_new %>% anti_join(cluster_merge, by = "ID")
```

```{r}
ggplot(cluster_merge, aes(x = score, color = factor(X7cluster))) +
  geom_density(size = 1.2, key_glyph = "path") +
  geom_density(aes(x=score, color = "Unclustered"), size = 1.2, data=low_score, key_glyph = "path") +
  geom_density(aes(x=score, color = "All grids"), size = 1.2, data=database_new, key_glyph = "path") +
  labs(x = "Score", y = "Density", color = "Cluster", title="Score distribution by cluster") +
  theme_minimal()
```

```{r}
ggplot(database_new, aes(x = score, color = pool)) +
  geom_density(size = 1.2, key_glyph = "path") +
  labs(x = "Score", y = "Density", color = "Pool Sampled", title="Score distribution by pool") +
  theme_minimal()
```


```{r}
# write.csv(cluster_merge, here::here("cluster_merge.csv"), row.names = FALSE)
```

```{r}
# write.csv(neighbors_cluster_long, here::here("neighbor-cluster.csv"), row.names = FALSE)
```

## Testings

```{r}
two_player <- list(c(37,4,2,2), c(45,3,3,3))
four_player <- list(c(37,5,1,2), c(45,2,4,3), c(60,0,0,0), c(47,4,3,4))
five_player <- list(c(37,3,0,2), c(45,2,4,3), c(60,3,0,0), c(47,2,0,4), c(38,1,4,4))
```

```{r}
mp_score(two_player)
```

```{r}
mp_score(four_player)
```

```{r}
mp_score(five_player)
```

```{r}
z <- score_grid(sample_grid)
z
```

```{r}
z2 <- score_grid(sample_grid2)
z2
```

```{r}
z3 <- score_grid(big_grid1)
z3
```

```{r}
set.seed(48)
test_grid <- generate_grid(cards)
test_grid
x <- find_cardinals(0,3,test_grid)
x
c <- sample(x, 1)
c
"el"
c[[1]][1]
score_grid(test_grid)
```

```{r}
solo_score(score_grid(test_grid))
```

```{r}
set.seed(48)
baseline_scores <- baseline_sim(cards)
```

```{r}
mean(baseline_scores)
sd(baseline_scores)
var(baseline_scores)
max(baseline_scores)
min(baseline_scores)
summary(baseline_scores)
```

```{r}
baseline_data <- data.frame(baseline_scores)
ggplot(aes(x = baseline_scores), data = baseline_data) +
  geom_histogram(binwidth = 5, fill = "steelblue")
```

```{r}
set.seed(4)

slide_grid <- matrix(c("Stream", "Dragonfly", "Wolf", "Meadow", "Meadow", "Stream", "Trout", "Bear", "Bee", "Meadow",
                      "Stream", "Stream", "Deer", "Eagle", "Wolf", "Stream", "Dragonfly", "Fox", "Deer",
                      "Rabbit"),4,5,byrow=TRUE)

run1 <- rw_mcmc(slide_grid, 1000, "annealing dynamic", 0.9, 200, record_board = TRUE)

completed_slide <-  matrix(run1[1:20], 4,5,byrow=TRUE)

slide_grid
solo_score(score_grid(slide_grid))

completed_slide
solo_score(score_grid(completed_slide))

slide_grid_op <- matrix(c("Stream", "Dragonfly", "Wolf", "Meadow", "Meadow", "Stream", "Trout", "Bear", "Bee", "Meadow",
                      "Stream", "Stream", "Eagle", "Rabbit", "Deer", "Stream", "Dragonfly", "Fox", "Deer",
                      "Wolf"),4,5,byrow=TRUE)
slide_grid_op
solo_score(score_grid(slide_grid_op))
```


```{r}
first_row <- score_grid(matrix(c(t(slide_grid)),nrow=4,ncol=5,byrow=T), individual=TRUE)

slide_score <- data.frame(
  bear_score = c(first_row[1]),
  bee_score = c(first_row[2]),
  meadow_score = c(first_row[3]),
  trout_score = c(first_row[4]),
  eagle_score = c(first_row[5]),
  rabbit_score = c(first_row[6]),
  dragonfly_score = c(first_row[7]),
  fox_score = c(first_row[8]),
  deer_score = c(first_row[9]),
  stream_score = c(first_row[10]),
  wolves_score = c(first_row[11]),
  dv_score = c(first_row[12])
)
slide_score
```


```{r}
# stream dragonfly trout
(choose(20, 7)*choose(8, 3)*choose(10, 3)*choose(92, 7))/choose(130, 20)
(choose(20, 5)*choose(8, 2)*choose(10, 2)*choose(92, 11))/choose(130, 20)
```

```{r}
# stream dragonfly
(choose(20, 9)*choose(8, 4)*choose(102, 7))/choose(130, 20)
(choose(20, 7)*choose(8, 3)*choose(102, 10))/choose(130, 20)
```

```{r}
# fox deer/wolf deer
(choose(12, 4)*choose(12, 3)*choose(106, 13))/choose(130, 20)
(choose(12, 3)*choose(12, 2)*choose(106, 15))/choose(130, 20)
```
```{r}
# bee meadow
(choose(20, 9)*choose(8, 4)*choose(102, 7))/choose(130, 20)
(choose(20, 5)*choose(8, 2)*choose(102, 13))/choose(130, 20)
```

```{r}
# bear bee trout
(choose(12, 4)*choose(8, 3)*choose(10, 4)*choose(100, 9))/choose(130, 20)
(choose(12, 3)*choose(8, 1)*choose(10, 2)*choose(100, 14))/choose(130, 20)
```
```{r}
# eagle rabbit 
(choose(8, 3)*choose(8, 3)*choose(10, 3)*choose(104, 11))/choose(130, 20)
(choose(8, 2)*choose(8, 2)*choose(10, 1)*choose(104, 15))/choose(130, 20)
```

```{r}
xvy <- cluster_merge %>% filter(X7cluster == "Cluster_4")
```

```{r}
fps2 <- read.csv(here::here("final-parameters-seed2.csv"))
```

```{r}
tuned_params <- read.csv(here::here("tuned-parameters.csv"))
```

### AI function

```{r}
multivariate_hypergeometric <- function(desired_counts, deck_counts, total_draw, total_deck = NULL) {
  # Input validation
  if (length(desired_counts) != length(deck_counts)) {
    stop("Length of desired_counts must match deck_counts")
  }
  if (any(desired_counts < 0) || any(deck_counts < 0)) {
    stop("Counts cannot be negative")
  }
  if (total_draw <= 0) {
    stop("Total draw must be positive")
  }
  
  # Calculate total deck size and other cards
  if (is.null(total_deck)) {
    total_deck <- sum(deck_counts)
    warning("Assuming total deck size is sum of provided deck_counts (", total_deck, 
            "). Specify total_deck if different.")
  }
  
  other_cards <- total_deck - sum(deck_counts)
  if (other_cards < 0) {
    stop("Sum of deck_counts exceeds total_deck")
  }
  
  # Check if draw is possible
  if (total_draw > total_deck) {
    stop("Cannot draw more cards than exist in deck")
  }
  if (sum(desired_counts) > total_draw) {
    return(0)  # Impossible to get all desired counts
  }
  
  # Initialize probability
  total_prob <- 0
  
  # Recursive helper function
  generate_combinations <- function(current, remaining_draw, remaining_types, prob_so_far) {
    if (length(current) == length(desired_counts)) {
      # Base case: all types assigned
      remaining_cards <- remaining_draw
      if (remaining_cards >= 0) {
        # Calculate final probability for this combination
        final_prob <- prob_so_far * 
          choose(other_cards, remaining_cards) / 
          choose(total_deck, total_draw)
        return(final_prob)
      } else {
        return(0)
      }
    }
    
    # Recursive case: assign counts for current type
    type_index <- length(current) + 1
    min_count <- desired_counts[type_index]
    max_count <- min(deck_counts[type_index], remaining_draw)
    
    prob_sum <- 0
    for (count in min_count:max_count) {
      new_current <- c(current, count)
      new_remaining <- remaining_draw - count
      new_prob <- prob_so_far * choose(deck_counts[type_index], count)
      prob_sum <- prob_sum + 
        generate_combinations(new_current, new_remaining, remaining_types, new_prob)
    }
    return(prob_sum)
  }
  
  # Start recursive calculation
  total_prob <- generate_combinations(
    current = numeric(0),
    remaining_draw = total_draw,
    remaining_types = length(desired_counts),
    prob_so_far = 1
  )
  
  return(total_prob)
}
```


```{r}
prob <- multivariate_hypergeometric(
  desired_counts = c(2, 5),    # Minimums for bees and meadows
  deck_counts = c(8, 20),      # Counts in deck for bees and meadows
  total_draw = 20,             # Drawing 20 cards
  total_deck = 130             # Total cards in deck
)
prob
```

```{r}
# bear bee trout minimum
prob <- multivariate_hypergeometric(
  desired_counts = c(3, 2, 2),
  deck_counts = c(12, 8, 10),
  total_draw = 20,
  total_deck = 130
)
prob

# bear bee trout maximum
prob <- multivariate_hypergeometric(
  desired_counts = c(4, 3, 3),
  deck_counts = c(12, 8, 10),
  total_draw = 20,
  total_deck = 130
)
prob
```

```{r}
# fox min
prob <- multivariate_hypergeometric(
  desired_counts = c(3),
  deck_counts = c(12),
  total_draw = 20,
  total_deck = 130
)
prob

# fox max
prob <- multivariate_hypergeometric(
  desired_counts = c(4),
  deck_counts = c(12),
  total_draw = 20,
  total_deck = 130
)
prob
```

```{r}
# bee meadow min
prob <- multivariate_hypergeometric(
  desired_counts = c(2, 5),    # Minimums for bees and meadows
  deck_counts = c(8, 20),      # Counts in deck for bees and meadows
  total_draw = 20,             # Drawing 20 cards
  total_deck = 130             # Total cards in deck
)
prob

# bee meadow max
prob <- multivariate_hypergeometric(
  desired_counts = c(4, 9),    # Minimums for bees and meadows
  deck_counts = c(8, 20),      # Counts in deck for bees and meadows
  total_draw = 20,             # Drawing 20 cards
  total_deck = 130             # Total cards in deck
)
prob
```

```{r}
# eagle rabbit trout min
prob <- multivariate_hypergeometric(
  desired_counts = c(2, 2, 1),    
  deck_counts = c(8, 8, 10),      
  total_draw = 20,             
  total_deck = 130             
)
prob

# eagle rabbit trout max
prob <- multivariate_hypergeometric(
  desired_counts = c(3, 3, 3),    
  deck_counts = c(8, 8, 10),      
  total_draw = 20,             
  total_deck = 130             
)
prob
```

```{r}
# stream dragonfly trout min
prob <- multivariate_hypergeometric(
  desired_counts = c(4, 2, 2),    
  deck_counts = c(20, 8, 10),      
  total_draw = 20,             
  total_deck = 130             
)
prob

# stream dragonfly trout max
prob <- multivariate_hypergeometric(
  desired_counts = c(7, 3, 3),    
  deck_counts = c(20, 8, 10),      
  total_draw = 20,             
  total_deck = 130             
)
prob
```

```{r}
# stream dragonfly min
prob <- multivariate_hypergeometric(
  desired_counts = c(5, 3),    
  deck_counts = c(20, 8),      
  total_draw = 20,             
  total_deck = 130             
)
prob

# stream dragonfly max
prob <- multivariate_hypergeometric(
  desired_counts = c(9, 4),    
  deck_counts = c(20, 8),      
  total_draw = 20,             
  total_deck = 130             
)
prob
```

```{r}
1-phyper(3, 12, 118, 20)
```


